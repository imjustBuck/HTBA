🔐 Password Managers & Alternatives – CPTS Breakdown
“Organize your secrets like a hacker. Weaponize your targets like a professional.”

🧠 Core Concept
Password managers are encrypted vaults that store, generate, and organize credentials. People use them because:

Everyone has dozens (if not hundreds) of passwords

Humans are bad at creating unique, complex passwords

Reuse = initial access goldmine

From a CPTS standpoint:
➡️ Understand how users store creds = know how to steal them
➡️ Understand how security is bypassed = build better evasion chains

🧩 How Do Password Managers Work?
Component	Purpose
Master Password	Unlocks everything else
Key Derivation	Converts the master pass into an encryption key
Database Encryption	Uses AES-256 or similar for the vault
Zero Knowledge	Cloud providers don’t know your vault contents (in theory)
🔐 Online Vaults: Sync across devices, cloud-stored (e.g., Bitwarden, 1Password)
🧱 Local Vaults: Stay on-device, user fully controls access (e.g., KeePass)

💥 CPTS Angle: When These Matter
💀 Credential Hunting?
Check these vault types/locations on compromised machines:

Target	Where to Look
Bitwarden	~/.config/Bitwarden/ or browser extension storage
KeePass	.kdbx files (usually in Documents, Downloads, Desktop)
Browser-based	Chrome/Firefox password store (Linux: ~/.mozilla, ~/.config/google-chrome)
Mobile devices	App data if rooted or jailbroken
🔧 Tools to Extract/Crack:

keepass2john → use with john/hashcat

browserpass, chromepass, or LaZagne (to steal browser creds)

Look for plaintext backup exports (.csv, .txt) users might store locally 😬

📦 CPTS Use Case: ZIPs & Vaults Together
If you find .kdbx or exported .csv, combine it with password spray techniques

Check if reused creds (sprayed or cracked) unlock the manager

Use tools like keepassxc or keepass2john for offline cracking

🛡️ Defensive Awareness (for reports)
Weak Practice	Risk
Reusing master password	Easy to brute once leaked
Exporting vaults in plaintext	Full compromise with 1 file
Disabling auto-lock timeout	Stolen unlocked vault = game over
Poor 2FA protection	Cloud vault easily hijacked
Use this to call out real risks in client environments during your CPTS exam report (if found on a compromised host).

🔄 Passwordless & MFA – Worth Knowing
Not directly exploitable unless misconfigured, but good awareness for reporting & bypass thinking.

Technique	Description
FIDO2	Physical key (Yubikey) for auth
TOTP/OTP	App- or email-based codes
Biometric	“Something you are” (fingerprint, FaceID)
Device Compliance	Auth only allowed from managed devices
Passwordless	Auth via possession factor (push, biometrics, etc.)
💥 CPTS Mental Model:
OSINT → Find weak points (does company use passwordless? Not everyone does)

MFA present? → Look for phishing vector or bypass

Passwordless not fully deployed? → Fall back to password spray

✅ TL;DR – CPTS Notes for Final Section
🧠 Enumerate These:
.kdbx, .csv, .json with creds

Bitwarden/1Password/Chrome vaults on disk

Key derivation configs (sometimes in source repos or export folders)

🛠️ Tools:
keepass2john + john

LaZagne / SharpChrome / Mimikatz (to extract vault creds from memory)

vaultCracker.py for some open formats

grep -r PRIVATE_KEY / password / vault through user folders

💣 Chain Them:
plaintext
Copy
Edit
Vault crack → New creds → VPN/RDP/login → escalate → loot more secrets
