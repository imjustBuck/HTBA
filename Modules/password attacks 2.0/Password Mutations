🔐 The Core Idea – Password Mutation
Humans are lazy, even with password policies. So what happens when you force complexity?

They game the system. And that’s our in.

🧠 What Users Typically Do:
Here’s the behavior patterns:

Pattern	Example
Capitalize first letter	Password
Add numbers	Password123
Add year/month	Password2024 or Password04
Add special char	Password2024!
Use leetspeak	P@ssw0rd
Slight tweak per rotation	Summer2023! → Summer2024!
So even with a complex policy enforced (uppercase, lowercase, number, special char, min length), users still follow predictable patterns.

🧰 Hashcat Rule Engine – Weaponizing Predictability
You start with a base wordlist, even a single word like password, then use Hashcat rules to mutate it like crazy.

🧪 Example:
Base word = password
Rule: c sa@ so0 $!
Mutated output: P@ssw0rd! 🎯

Here’s what each function does:

Rule	Meaning
:	Do nothing
c	Capitalize first letter
sa@	Replace a with @
so0	Replace o with 0
$!	Add ! at end
Hashcat runs through every combo of those rules. 🔄

🔥 Manual Rule File Example
Here’s a custom rule file (custom.rule):

ruby
Copy
Edit
:
c
so0
c so0
sa@
c sa@
c sa@ so0
$!
$! c
$! so0
$! sa@
$! c so0
$! c sa@
$! so0 sa@
$! c so0 sa@
Then you run:

bash
Copy
Edit
hashcat --force password.list -r custom.rule --stdout | sort -u > mut_password.list
Now you’ve got a list of 15+ smart mutations of password that are policy-compliant and human-likely.

🔎 OSINT + Mutation = Death Combo
This part is crucial for CPTS and real-world ops:

Use CeWL to scrape words from a company’s site:

bash
Copy
Edit
cewl https://example.com -d 4 -m 6 --lowercase -w custom.wordlist
Then mutate those words with rules:

bash
Copy
Edit
hashcat --force custom.wordlist -r best64.rule --stdout > mega-list.txt
You now have a wordlist customized to that org’s language, culture, and naming — plus mutated to match common password policy tricks.

🧠 Tactics for CPTS:
Try FTP or HTTP Basic login first with default or mutated creds.

If an account has RDP, SMB, SSH, or WinRM access, pivot with that same login.

Use crackmapexec, hydra, or nmap --script brute* with your mutated list.

Tailor your mutation guesses around company name + year + special char (e.g., inlane2024!).

🧩 CPTS Password Flow Summary
text
Copy
Edit
1. OSINT:
   → cewl, LinkedIn, GitHub, Wordlists

2. Wordlist Build:
   → base wordlist + Hashcat rule + mutate

3. Test Services:
   → FTP first (fast), then SSH/SMB/WinRM/RDP

4. Reuse Passwords:
   → Once found, spray them across other services

5. Look for Patterns:
   → Summer2024! → Try Spring2024!, Summer2023!, etc.


The CPTS exam definitely expects you to:

Recognize weak password patterns

Leverage smart wordlists, whether they’re:

Prebuilt and mutated like the one they gave you

Built from OSINT like scraping a company’s site via cewl

Generated from a leaked or guessed base + rule combo

🧠 Think of it like this:
Mutated Wordlists = Your Shotgun You don’t need to brute every single possibility. You just need:

The right seed (company name, month, pet name, etc.)

The right rule (capitalize, add year, leetspeak, add !)

Once you got that? 🎯 High-probability password hits.

🔧 On the Exam (or Real Ops):
Here’s how it might show up:

🔍 You find ftp://, http://admin.site.local, or smb://target

🧾 They give you user.list and password.list (or you enumerate them)

🧪 You test default creds and get nothing

🧠 So you:

Use Hydra or CrackMapExec with their mutated wordlist

Or generate your own with hashcat --stdout + custom rule

Or pull from cewl/company blog and mutate that

Boom — a login hits. You pivot.

✅ TL;DR — You're Right to Assume:
The provided custom mutation list is part of how they teach you to think offensively.

You're expected to use it or recreate something like it on the exam.

You’ll either:

Be given a custom wordlist to use with Hydra,

Or you’ll generate your own from recon or cewl,

And you’ll need to apply it strategically to the right service.
