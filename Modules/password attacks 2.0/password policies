🧠 SECTION: Password Policy & Its Offensive Use
Think of this like understanding traffic laws — not because you’re a driver, but because you’re a car thief planning the perfect heist. The more you know how policies are enforced, the easier it is to bypass or predict them.

🔐 What Is a Password Policy?
A set of rules enforced by companies to improve password strength and limit risk:

It defines how passwords should be created.

It governs the lifecycle: creation → use → storage → expiration.

It's both a technical control (enforced via GPO, SSSD, AD config) and a human process (communicated to employees).

🧩 THE TWO PILLARS
1. 📝 Definition (The Rulebook)
This is the guideline part: e.g., "Minimum 8 chars, special char, etc."

Based on compliance: NIST SP800-63B, CIS, PCI DSS.

CPTs/Red Teamers should pay attention to:

Expiration cycles (monthly? quarterly? only after compromise?)

Complexity rules

Blacklist implementation

Password history prevention

2. 🛠️ Enforcement (The Tech)
In Windows: enforced via GPOs in Active Directory

In Linux: /etc/login.defs, pam_pwquality.so, SSSD settings

Key Enumeration Point: Credentialed AD enumeration or GPO dump can reveal enforcement config

🚨 Why This Matters Offensively
🔎 Enumerating the Policy
If you have creds or can execute PowerShell, you can dump the policy:

powershell
Copy
Edit
Get-ADDefaultDomainPasswordPolicy
or use rpcclient from Linux:

bash
Copy
Edit
rpcclient -U "" <DC-IP> -c "getdompwinfo"
Gives you:

Minimum password length

Lockout threshold

Lockout duration

Password age / expiration

Complexity requirements

🎯 Real-World Attack Benefits
1. Smarter Wordlist Generation
Say you dump:

Minimum length: 8

Must have: Upper + Lower + Number + Special

Password changes every 60 days

You now know:

Welcome2024! or Inlanefreight01! likely exist

Users will change ! to @, or bump 01 to 02

Names + month combos like MarkJune23! are probable

Build a custom mutation list:
bash
Copy
Edit
cat usernames.txt | while read name; do
  echo "${name}01!"
  echo "${name}@2024"
  echo "${name^}Summer24!"
done >> mutated_list.txt
2. Password Spraying Optimization
If policy enforces lockouts after 3-5 attempts, you:

Use slow spraying (one attempt per user every X minutes)

Focus on likely combos based on password history patterns

3. Credential Stuffing or Replay
If creds are reused across services, or weak passwords are set initially and never changed, these creds become gold.

You will run into Spring2024!, Password1!, or CompanyName2024!.

4. Password Expiration = Weak Patterns
If a user uses Inlanefreight01!, they’ll likely move to 02!, 03!, etc.

Attack chain:

Crack Inlanefreight01!

Password expired? Try:

Inlanefreight02!

Inlanefreight03!

Or look for other services still using the old password (ex: Jenkins, Dev apps)

🔥 BONUS: Common Weak Pattern Examples
Type	Examples
Company-Based	Inlanefreight01!, Inlane@2024
Season/Year	Summer2024!, Spring24$
Default/Welcome	Welcome01, Changeme!
Name Combos	Mark2024!, Julie#01
🧱 Blacklist Suggestions to Consider (if you're the blue team too)
Company name in any form

Welcome / Password / 123456 / qwerty

Months, seasons, holidays

Year combos (e.g., 2023, 2024, 2025)

Device or app names (splunkadmin2023!)

🛠️ Final Pro Tip: Custom Wordlist Strategy for Real Engagements
During initial recon or after credential dump, try building a hybrid list:

bash
Copy
Edit
cewl -d 3 -m 5 -w site_words.txt http://company.internal
cat site_words.txt rockyou.txt > combined.txt
Then combine with rules:

bash
Copy
Edit
john --wordlist=combined.txt --rules --stdout > smartlist.txt
Or use PrinceProcessor for name+number+special combos:

bash
Copy
Edit
./pp64.bin < keywords.txt > passwordlist.txt
✅ TL;DR: Attacker Takeaways
Enumerate password policies early (cred'd or via GPO dumps).

Use policies to custom-tailor your wordlists.

Expect users to game expiration by tiny mutations (e.g., Spring2024! → Spring2025!).

Exploit shared user behavior patterns across companies.

Policy gives you a predictive edge — don’t ignore it!


🍝 CPTS Password Policy Strategy — The Sauce
🧱 Goal:
Use password policy info + observed patterns to:

Build smarter mutated wordlists

Reduce spray + brute attempts

Shave 30–70% off initial access time

Break into at least one low-priv user for foothold

🔓 UNAUTHENTICATED ENUMERATION
(You don’t have creds yet — pure recon phase)

🔍 Where to look:
Location	Info You Can Pull	Tool
NetBIOS banners or SMB null sessions	Domain name, AD structure	nmblookup, enum4linux-ng, smbclient -L
Company email format leaks	Username structure	hunter.io, cewl, Google dorking
Public Git / Jira / Confluence	Policy hints, reused passwords, training docs	OSINT, Google
Login portals (like OWA/RDWeb)	Password length restrictions, error feedback	Manual testing
🔨 Wordlist usage (unauth):
Once you figure out username structure (e.g. first.last, f.lastname, or jdoe) and spot any patterns:

Build smart base list:

bash
Copy
Edit
cat usernames.txt | while read user; do
  echo "${user}01!"
  echo "${user}2024!"
  echo "${user^}Spring24!"
done > base_mutated.txt
Then combine with cewl, crunch, or princeprocessor to simulate user-chosen passwords:

bash
Copy
Edit
cewl -d 2 -m 5 http://target.corp > company_words.txt
princeprocessor company_words.txt > prince_list.txt
cat base_mutated.txt prince_list.txt > smart_guesslist.txt
🔥 Use this list for slow spraying or brute-forcing web portals with hydra, ncrack, crowbar, or kerbrute if you get usernames via AS-REP.

✅ AUTHENTICATED ENUMERATION
(You got at least 1 valid user + password combo)

This is where the policy goldmine lives.

🔍 Where to Look:
Target	Info	Tool
rpcclient	Dump domain password policy	rpcclient -U "" <ip> -c "getdompwinfo"
Get-ADDefaultDomainPasswordPolicy (PowerShell)	Get AD policy (length, complexity, lockouts)	PowerShell
/etc/sssd/sssd.conf or /etc/login.defs (Linux joined to AD)	PAM/SSSD enforced complexity	Manual / LinPEAS
/etc/security/pwquality.conf	Linux password complexity (offline enforcement)	Manual
Domain GPO dump (gpp-decrypt, gpp-password, SMB share loot)	Reveal older policy settings or hardcoded creds	secretsdump.py, smbclient, or CrackMapExec
🔨 How to Use It:
Let’s say you get this from rpcclient or PowerShell:

powershell
Copy
Edit
Minimum password length: 8
Complexity: Enabled
Max password age: 60 days
And you know the company is called Inlanefreight.

🔥 Now you mutate:

bash
Copy
Edit
echo "Inlanefreight01!" >> smartlist.txt
echo "Inlanefreight02!" >> smartlist.txt
echo "Spring2024!" >> smartlist.txt
echo "Inlane@2024" >> smartlist.txt
echo "Welcome@123" >> smartlist.txt
Add month + year:

bash
Copy
Edit
for user in $(cat users.txt); do
  echo "${user}2024!"
  echo "${user}April24!"
  echo "${user^}Spring!"
done >> smartlist.txt
Then brute with:

bash
Copy
Edit
hydra -L users.txt -P smartlist.txt rdp://<target-ip>
or

bash
Copy
Edit
kerbrute passwordspray -d inlanefreight.htb users.txt smartlist.txt
💡 Pro-Level Wordlist Targeting Tips
Observed Policy	Wordlist Behavior
8-char min, complexity off	Use shorter combos: Company1, Spring24
Complexity ON	Add !, @, # to tail
Password changes every 60-90 days	Add 01–12, month names, seasons
Users reuse patterns	Brute only the suffix, keep root same
No lockout on services	Use fast brute mode for efficiency
Lockout at 3-5 attempts	Use spray every 30 mins w/ top guesses only
🧠 CPTS-Specific Takeaways
You’re not just collecting policy data for fun — it drives your wordlist strategy

On AEN exam machines, if you spot usernames + domain, slow spray high-confidence guesses like:

Company@2024

Firstname01!

Spring24!

Watch for low-priv Linux boxes joined to AD — they often leak sssd configs or readable keytabs

Always combine policy info + behavioral patterns (lazy humans = predictable passwords)

The faster you get 1 valid foothold, the faster the escalation → chaining → root
