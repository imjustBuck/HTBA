This section isn’t about mastering every kernel exploit. It's about:

Recognizing when a kernel exploit is worth trying

Knowing how to quickly check for vulnerable versions/missing patches

Understanding the workflow of chaining local exploits to elevate to SYSTEM

Being aware of legacy vulnerabilities still seen in real environments (especially in healthcare, finance, or old industrial setups)

In the exam? This is likely rare. But knowing the flow lets you pivot if everything else fails or if the box is super old.

🛠️ Workflow — Kernel Exploit Flow
🔍 Step 1: Situational Awareness
powershell
Copy
Edit
whoami /priv         # See what you're working with
systeminfo           # Check OS version and build
wmic qfe list brief  # Installed patches
📅 Step 2: Patch Awareness
Use KB numbers to determine how old the system is

Use systeminfo build + patch dates to guess missing security fixes

Focus on known LPE bugs like:

MS08-067

MS17-010 (EternalBlue)

PrintNightmare

HiveNightmare

CVE-2020-0668

CVE-2021-1675

UsoDllLoader (used for chaining)

🧩 “Got This? Do That.” Flow
Got This: icacls shows BUILTIN\Users:(RX) on SAM, SYSTEM, or SECURITY hives
👉 Do This:

Check for Volume Shadow Copies

Use HiveNightmare exploit

Dump hashes with secretsdump

Got This: Missing KB patch, system build old (pre-2021)
👉 Do This:

Cross-ref CVEs that affect the build

Try known PoCs like PrintNightmare (PoC adds local admin or runs DLL)

Got This: Can move file via CVE-2020-0668
👉 Do This:

Use it to gain write access to a protected service binary

Replace it with your own shell or custom payload

Restart service or trigger it

Got This: Mozilla Maintenance Service present and user can start it
👉 Do This:

Generate malicious .exe

Use 0668 to hijack file

Replace it and start service → get SYSTEM shell

⚙️ Tools You’ll Likely Use
icacls

systeminfo

wmic qfe list brief

secretsdump.py

msfvenom

HiveNightmare.exe

CVE-2020-0668.exe

💡 Pro Tips & Hints
Always confirm Volume Shadow Copies exist for HiveNightmare

DLL Hijacks are often noisy; save for last resort

Kernel exploits are loud and destructive — avoid unless you're stuck or told it's in-scope

You’ll often need to chain one misconfig with another (e.g., CVE-2020-0668 → file write → vulnerable service)

Exam may include known vulnerable software setups (e.g., Mozilla Maintenance Service)
