10.129.191.30


Question 1 - Enumerate the accessible services and find a flag. Submit the flag value as your answer (flag format: HTB{ }).
1. ftp anonymous@inlanefreight.local
Connected to inlanefreight.local.
220 (vsFTPd 3.0.3)
331 Please specify the password.
Password: 
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> dir
229 Entering Extended Passive Mode (|||46805|)
150 Here comes the directory listing.
-rw-r--r--    1 0        0              38 May 30  2022 flag.txt
226 Directory send OK.
ftp> get flag.txt
local: flag.txt remote: flag.txt
229 Entering Extended Passive Mode (|||47291|)
150 Opening BINARY mode data connection for flag.txt (38 bytes).
100% |*************************************************************************************************************************************************|    38       22.87 KiB/s    00:00 ETA
226 Transfer complete.
38 bytes received in 00:00 (3.30 KiB/s)
ftp> exit
221 Goodbye.

5. cat flag.txt 
HTB{0eb0ab788df18c3115ac43b1c06ae6c4}


GPT Organinzed: 

üîç Module: Service Enumeration & Exploitation
‚úÖ What You Did Right:
üì• Used ftp anonymous@inlanefreight.local ‚Äî confirmed anonymous login ‚úÖ

üßæ Listed directory and downloaded a file (flag.txt) ‚úÖ

üß† Understood that Nmap already gave you the FTP version: vsftpd 3.0.3 ‚úÖ

ü™ì Moved on with the goal of grabbing the flag and not over-engineering ‚Äî totally valid in blind runs

üìà What To Add (Next Time or in Report):
üí° 1. Document FTP Service Findings Cleanly
markdown
Copy
Edit
### FTP Service (Port 21)

- **Service:** vsftpd 3.0.3
- **Access:** Anonymous login successful (`ftp anonymous@inlanefreight.local`)
- **Findings:**
  - File `flag.txt` found and successfully retrieved
  - No upload rights confirmed (did not test)
  - Directory listing successful
- **Security Note:** Anonymous FTP with read access enabled
üî• 2. Use nmap scripts for extra detail (good for reporting + bonus enum)
bash
Copy
Edit
nmap -p21 --script=ftp-anon,ftp-syst,ftp-bounce inlanefreight.local
ftp-anon: confirms login

ftp-syst: system banner (already seen)

ftp-bounce: check for bounce attack support

üõë 3. Check for Potential Upload (didn‚Äôt hurt you this time, but useful habit)
Even just running:

bash
Copy
Edit
ftp> mkdir test
ftp> put test.txt
Then removing it. This checks if you have write access for persistence, malicious file upload, or misconfig. If it works, huge finding.

üß† 4. Tie FTP Enum to Real-World Risk (report-level)
markdown
Copy
Edit
**Risk:** Anonymous FTP access allows unauthenticated users to download files from the server. If sensitive files are accessible or directory traversal is possible, it could lead to information leakage or further compromise.

**Recommendation:** Disable anonymous login or restrict access to trusted IPs. Audit FTP share contents and permissions.
‚úçÔ∏è Final Writeup Sample:
markdown
Copy
Edit
### FTP Enumeration

- Port 21 open (vsftpd 3.0.3)
- Anonymous login allowed (`ftp anonymous@inlanefreight.local`)
- Directory listing successful
- Retrieved file: `flag.txt` ‚Üí `HTB{0eb0ab788df18c3115ac43b1c06ae6c4}`
- No upload rights tested
- Potential risk: Sensitive data exposure via unauthenticated access

**Recommendation:** Disable anonymous FTP access unless strictly required.
üß† Summary:
You're not wrong for skipping the fluff in a blind run. But when it‚Äôs time to polish:

Hit service, version, access level

Check for write/upload potential

Use 1‚Äì2 Nmap NSE scripts for enrichment

Add a mini risk assessment and recommendation

