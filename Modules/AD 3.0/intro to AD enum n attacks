Why Should We Care About AD?
At the time of writing this module, Microsoft Active Directory holds around 43% of the market share for enterprise organizations utilizing Identity and Access management solutions. This is a huge portion of the market, and it isn't likely to go anywhere any time soon since Microsoft is improving and blending implementations with Azure AD. Another interesting stat to consider is that just in the last two years, Microsoft has had over 2000 reported vulnerabilities tied to a CVE. AD's many services and main purpose of making information easy to find and access make it a bit of a behemoth to manage and correctly harden. This exposes enterprises to vulnerabilities and exploitation from simple misconfigurations of services and permissions. Tie these misconfigurations and ease of access with common user and OS vulnerabilities, and you have a perfect storm for an attacker to take advantage of. With all of this in mind, this module will explore some of these common issues and show us how to identify, enumerate, and take advantage of their existence. We will practice enumerating AD utilizing native tools and languages such as Sysinternals, WMI, DNS, and many others. Some attacks we will also practice include Password spraying, Kerberoasting, utilizing tools such as Responder, Kerbrute, Bloodhound, and much more.

. The general goal of gaining a foothold in a client's AD environment is to escalate privileges by moving laterally or vertically throughout the network until we accomplish the intent of the assessment. The goal can vary from client to client. It may be accessing a specific host, user's email inbox, database, or just complete domain compromise and looking for every possible path to Domain Admin level access within the testing period. Many open-source tools are available to facilitate enumerating and attacking Active Directory. To be most effective, we must understand how to perform as much of this enumeration manually as possible. More importantly, we need to understand the "why" behind certain flaws and misconfigurations. This will make us more effective as attackers and equip us to give sound recommendations to our clients on the major issues within their environment, as well as clear and actionable remediation advice.

We need to be comfortable enumerating and attacking AD from both Windows and Linux, with a limited toolset or built-in Windows tools, also known as "living off the land." It is common to run into situations where our tools fail, are being blocked, or we are conducting an assessment where the client has us work from a managed workstation or VDI instance instead of the customized Linux or Windows attack host we may have grown accustomed to. To be effective in all situations, we must be able to adapt quickly on the fly, understand the many nuances of AD and know how to access them even when severely limited in our options.

Lets peek and poke at some real world examples. 

Scenario 1 - Waiting On An Admin

During this engagement, I compromised a single host and gained SYSTEM level access. Because this was a domain-joined host, I was able to use this access to enumerate the domain. I went through all of the standard enumeration, but did not find much. There were Service Principal Names (SPNs) present within the environment, and I was able to perform a Kerberoasting attack and retrieve TGS tickets for a few accounts. I attempted to crack these with Hashcat and some of my standard wordlists and rules, but was unsuccessful at first. I ended up leaving a cracking job running overnight with a very large wordlist combined with the d3ad0ne rule that ships with Hashcat. The next morning I had a hit on one ticket and retrieved the cleartext password for a user account. This account did not give me significant access, but it did give me write access on certain file shares. I used this access to drop SCF files around the shares and left Responder going. After a while, I got a single hit, the NetNTLMv2 hash of a user. I checked through the BloodHound output and noticed that this user was actually a domain admin! Easy day from here. 

Scenario 2 - Spraying The Night Away

Password spraying can be an extremely effective way to gain a foothold in a domain, but we must exercise great care not to lock out user accounts in the process. On one engagement, I found an SMB NULL session using the enum4linux tool and retrieved both a listing of all users from the domain, and the domain password policy. Knowing the password policy was crucial because I could ensure that I was staying within the parameters to not lock out any accounts and also knew that the policy was a minimum eight-character password and password complexity was enforced (meaning that a user's password required 3/4 of special character, number, uppercase, or lower case number, i.e., Welcome1). I tried several common weak passwords such as Welcome1, Password1, Password123, Spring2018, etc. but did not get any hits. Finally, I made an attempt with Spring@18 and got a hit! Using this account, I ran BloodHound and found several hosts where this user had local admin access. I noticed that a domain admin account had an active session on one of these hosts. I was able to use the Rubeus tool and extract the Kerberos TGT ticket for this domain user. From there, I was able to perform a pass-the-ticket attack and authenticate as this domain admin user. As a bonus, I was able to take over the trusting domain as well because the Domain Administrators group for the domain that I took over was a part of the Administrators group in the trusting domain via nested group membership, meaning I could use the same set of credentials to authenticate to the other domain with full administrative level access.


Scenario 3 - Fighting In The Dark

I had tried all of my standard ways to obtain a foothold on this third engagement, and nothing had worked. I decided that I would use the Kerbrute tool to attempt to enumerate valid usernames and then, if I found any, attempt a targeted password spraying attack since I did not know the password policy and didn't want to lock any accounts out. I used the linkedin2username tool to first mashup potential usernames from the company's LinkedIn page. I combined this list with several username lists from the statistically-likely-usernames GitHub repo and, after using the userenum feature of Kerbrute, ended up with 516 valid users. I knew I had to tread carefully with password spraying, so I tried with the password Welcome2021 and got a single hit! Using this account, I ran the Python version of BloodHound from my attack host and found that all domain users had RDP access to a single box. I logged into this host and used the PowerShell tool DomainPasswordSpray to spray again. I was more confident this time around because I could a) view the password policy and b) the DomainPasswordSpray tool will remove accounts close to lockout from the target list. Being that I was authenticated within the domain, I could now spray with all domain users, which gave me significantly more targets. I tried again with the common password Fall2021 and got several hits, all for users not in my initial wordlist. I checked the rights for each of these accounts and found that one was in the Help Desk group, which had GenericAll rights over the Enterprise Key Admins group. The Enterprise Key Admins group had GenericAll privileges over a domain controller, so I added the account I controlled to this group, authenticated again, and inherited these privileges. Using these rights, I performed the Shadow Credentials attack and retrieved the NT hash for the domain controller machine account. With this NT hash, I was then able to perform a DCSync attack and retrieve the NTLM password hashes for all users in the domain because a domain controller can perform replication, which is required for DCSync.


Scenario 1 – Waiting On An Admin
Summary: SYSTEM access on a domain-joined host → Kerberoasting attempt → eventually cracked a password → low-priv user → dropped .scf files → captured NetNTLMv2 → hash belonged to a Domain Admin.

Workflow:

1. Initial foothold: SYSTEM shell on a domain-joined box.

2. Run BloodHound: Check SPNs, user privileges.

3. Attempt Kerberoasting: Even if nothing cracks, leave cracking running.

4. Low-priv access: If cracked, try file shares or lateral movement.

5. Drop .scf files: Use Responder for NetNTLMv2 hash capture.

6. Check captured hash's privileges: Could be high-value like DA.

Takeaways:

Don’t sleep on SPNs, even if they don’t crack at first.

.scf attacks can land you big wins when placed in user-browsed shares.

Always cross-reference captured credentials with BloodHound.

Scenario 2 – Spraying The Night Away
Summary: ENUM via SMB NULL session → Retrieved users & password policy → Password sprayed carefully → Found a user with local admin access on hosts → Found DA session → Used Rubeus to extract TGT → Pass-the-ticket → DA → Pivoted to trusting domain.

Workflow:

1. Enumerate users & policy: enum4linux, SMB NULL session.

2. Password spraying: Use policy-safe, likely passwords (e.g. Spring@18).

3. Use BloodHound: Check local admin access.

4. Find DA session on host: Look for ticket opportunities.

5. Extract TGT w/ Rubeus: If a DA is logged in.

6. Pass-the-ticket to escalate: Full DA access.

7. Check trust relationships: Look for nested admin groups across domains.

Takeaways:

Password policy is key to avoid lockouts.

A user with local admin can get you DA if the right session is live.

Always check BloodHound for cross-domain relationships.

Scenario 3 – Fighting In The Dark
Summary: No foothold initially → Created custom usernames with linkedin2username + GitHub lists → Validated with Kerbrute → Password sprayed Welcome2021 → Found one → All domain users had RDP to a box → Used internal tool to spray again → One user had GenericAll over Enterprise Key Admins → Chained GenericAll → Shadow Credentials → DCSync.

Workflow:

1. Username generation: External recon via LinkedIn → build custom lists.

2. Kerbrute user validation: Confirm which users are real.

3. Password spraying: Try common ones (Welcome2021, Fall2021, etc.).

4. Enumerate access post-auth: Check RDP, BloodHound access.

5. Internal spraying with tools: Use DomainPasswordSpray.

6. Check BloodHound paths: Look for GenericAll, GenericWrite, WriteDACL, etc.

7. Abuse object control: Shadow credentials → Get computer NT hash.

DCSync: Full domain compromise.

Takeaways:

Building a user list and being careful with password spraying pays off.

Once inside, use internal tooling for smarter spraying.

GenericAll is a gift — watch the attack chain closely.

Shadow Credentials are killer for silently gaining DC-level access.

🔥 TL;DR - What To Look For in AD:
User Enumeration:

Use enum4linux, Kerbrute, LinkedIn scraping.

Always get the password policy!

Initial Access/Footprint:

Spray safely → low-priv access is fine.

Check for RDP, shares, or local admin rights.

BloodHound Goals:

SPNs → Kerberoasting

DA sessions → Pass-the-ticket

GenericAll, WriteDACL, AddMember, etc.

Post-Access:

Responder + .scf file drops

Rubeus for TGTs/Tickets

Lateral movement via SMB, RDP, WMI, etc.

Privilege Escalation Targets:

Shadow Credentials

Group membership manipulation

DCSync (with Replication rights or machine hash)
