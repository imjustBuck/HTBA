Password spraying can result in gaining access to systems and potentially gaining a foothold on a target network. The attack involves attempting to log into an exposed service using one common password and a longer list of usernames or email addresses. The usernames and emails may have been gathered during the OSINT phase of the penetration test or our initial enumeration attempts. Remember that a penetration test is not static, but we are constantly iterating through several techniques and repeating processes as we uncover new data. Often we will be working in a team or executing multiple TTPs at once to utilize our time effectively. As we progress through our career, we will find that many of our tasks like scanning, attempting to crack hashes, and others take quite a bit of time. We need to make sure we are using our time effectively and creatively because most assessments are time-boxed. So while we have our poisoning attempts running, we can also utilize the info we have to attempt to gain access via Password Spraying. Now let's cover some of the considerations for Password spraying and how to make our target list from the information we have.


Story Time
Password spraying can be a very effective way to gain a foothold internally. There are many times that this technique has helped me land a foothold during my assessments. Keep in mind that these examples come from non-evasive "grey box" assessments where I had internal network access with a Linux VM and a list of in-scope IP ranges and nothing else.

Scenario 1
In this first example, I performed all my standard checks and could not find anything useful like an SMB NULL session or LDAP anonymous bind that could allow me to retrieve a list of valid users. So I decided to use the Kerbrute tool to build a target username list by enumerating valid domain users (a technique we will cover later in this section). To create this list, I took the jsmith.txt username list from the statistically-likely-usernames GitHub repo and combined this with results that I got from scraping LinkedIn. With this combined list in hand, I enumerated valid users with Kerbrute and then used the same tool to password spray with the common password Welcome1. I got two hits with this password for very low privileged users, but this gave me enough access within the domain to run BloodHound and eventually identify attack paths that led to domain compromise.


Scenario 2
In the second assessment, I was faced with a similar setup, but enumerating valid domain users with common username lists, and results from LinkedIn did not yield any results. I turned to Google and searched for PDFs published by the organization. My search generated many results, and I confirmed in the document properties of 4 of them that the internal username structure was in the format of F9L8, randomly generated GUIDs using just capital letters and numbers (A-Z and 0-9). This information was published with the document in the Author field and shows the importance of scrubbing document metadata before posting anything online. From here, a short Bash script could be used to generate 1,679,616 possible username combinations.

lil script syntax: 

#!/bin/bash

for x in {{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}}
    do echo $x;
done

I then used the generated username list with Kerbrute to enumerate every single user account in the domain. This attempt to make it more difficult to enumerate usernames ended up with me being able to enumerate every single account in the domain because of the predictable GUID in use combined with the PDF metadata I could locate and greatly facilitated the attack. Typically, I can only identify 40-60% of valid accounts using a list such as jsmith.txt. In this example, I significantly increased my chances of a successful password spraying attack by starting the attack with ALL domain accounts in my target list. From here, I obtained valid passwords for a few accounts. Eventually, I was able to follow a complicated attack chain involving Resource-Based Constrained Delegation (RBCD) and the Shadow Credentials attack to ultimately gain control over the domain.


side note one thing i had questions about was ok are thes credentialed scans or are we just using tools cause we know the ip ranges and have the SoW and they are NOT credentialed scans yet.. jsut using what was gathered from external info gathering and putting username wordlists together.... also asked chattydaddy to summarize and make workflow for this -> 


✅ Are These Credentialed?
Both scenarios start unauthenticated. The tester does not have valid credentials yet but uses Kerbrute to enumerate valid usernames. Once they find valid usernames, they proceed with password spraying using commonly used passwords like Welcome1. Once they get a hit, that’s when it becomes credentialed.

So yes, it starts unauthenticated—the scope of the assessment allows it, and this is realistic for red team/internal style tests.

🔍 Scenario 1 – Workflow Summary: Kerbrute Enum + Basic Spray
Summary:

Tester had no initial access.

Combined a custom username list from GitHub + LinkedIn scraping.

Used Kerbrute to enumerate valid users.

Sprayed Welcome1 → got 2 low-priv hits.

Used creds to run BloodHound, found a path to DA.

Workflow:

🔎 Use Kerbrute with a custom username list.

✅ Enumerate valid usernames.

🔐 Password spray with common creds (Welcome1, Password123, Fall2021!, etc.).

📈 If creds work → run BloodHound & Sharphound.

🧠 Analyze shortest path to escalation (e.g. local admin, RBCD, GenericAll).

💥 Execute chain to escalate to Domain Admin.

Key Takeaways:

Even low-priv creds are powerful if BloodHound reveals a path.

LinkedIn + public recon can build a better target list than brute force.

🔍 Scenario 2 – Workflow Summary: Metadata Recon + GUID Username Pattern
Summary:

Tester couldn’t find usernames via normal means.

Found username structure from PDF metadata: 4-char GUID-style.

Used a bash script to generate 1.6M possible usernames.

Ran Kerbrute against that list, got hits.

Sprayed passwords → gained access → followed complex RBCD + Shadow Credentials chain to DA.

Workflow:

📄 Recon public-facing documents (PDF, DOCX, etc.).

🔍 Extract author metadata → derive username structure.

🧠 Generate permutations (bash/wordlist).

✅ Kerbrute for user enumeration.

🔐 Spray credentials.

🧭 Run BloodHound to discover privilege paths.

🛠️ Execute advanced escalation chain (RBCD, ShadowCreds, etc.).

Key Takeaways:

Public document metadata can leak internal usernames.

Even GUID-style usernames can be brute-forced if predictable.

A strong recon game sets up better spraying success.



Step	      Tool	                                                Purpose
1️⃣	        kerbrute userenum	                                    Enumerate valid usernames
2️⃣	        kerbrute passwordspray or DomainPasswordSpray	        Attempt password spray
3️⃣	        On success, use BloodHound/Sharphound	                Map privilege escalation paths
4️⃣	        Check user group membership	                          Look for local admin, nested groups, etc.
5️⃣	        Explore advanced paths	                              RBCD, Shadow Credentials, ACL abuse, etc.




