
Many modern back-end languages, such as PHP, Javascript, or Java, use HTTP parameters to specify what is shown on the web page, which allows for building dynamic web pages, reduces the script's overall size, and simplifies the code. In such cases, parameters are used to specify which resource is shown on the page. If such functionalities are not securely coded, an attacker may manipulate these parameters to display the content of any local file on the hosting server, leading to a Local File Inclusion (LFI) vulnerability.

The most common place we usually find LFI within is templating engines. In order to have most of the web application looking the same when navigating between pages, a templating engine displays a page that shows the common static parts, such as the header, navigation bar, and footer, and then dynamically loads other content that changes between pages. Otherwise, every page on the server would need to be modified when changes are made to any of the static parts. This is why we often see a parameter like /index.php?page=about, where index.php sets static content (e.g. header/footer), and then only pulls the dynamic content specified in the parameter, which in this case may be read from a file called about.php. As we have control over the about portion of the request, it may be possible to have the web application grab other files and display them on the page.

LFI vulnerabilities can lead to source code disclosure, sensitive data exposure, and even remote code execution under certain conditions. Leaking source code may allow attackers to test the code for other vulnerabilities, which may reveal previously unknown vulnerabilities.

 file Inclusion vulnerabilities can occur in many of the most popular web servers and development frameworks, like PHP, NodeJS, Java, .Net, and many others. Each of them has a slightly different approach to including local files, but they all share one common thing: loading a file from a specified path.

Note: In this module, we will mostly focus on PHP web applications running on a Linux back-end server. However, most techniques and attacks would work on the majority of other frameworks, so our examples would be the same with a web application written in any other language.


The following table shows which functions may execute files and which only read file content:

Function	                                Read Content	    Execute	                Remote URL
PHP			
include()/include_once()	                  ✅	              ✅	                    ✅
require()/require_once()	                  ✅	              ✅	                    ❌
file_get_contents()	                        ✅	              ❌	                    ✅
fopen()/file()	                            ✅	              ❌	                    ❌

NodeJS			
fs.readFile()	                              ✅	              ❌	                    ❌
fs.sendFile()	                              ✅	              ❌	                    ❌
res.render()	                              ✅	              ✅	                    ❌

Java			
include	                                    ✅	              ❌	                    ❌
import	                                    ✅	              ✅	                    ✅

.NET			
@Html.Partial()	                            ✅	              ❌	                    ❌
@Html.RemotePartial()	                      ✅	              ❌	                    ✅
Response.WriteFile()	✅	❌	❌
include	✅	✅	✅
