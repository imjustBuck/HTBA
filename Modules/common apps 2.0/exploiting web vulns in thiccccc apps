🧠 Summary (Thick Client w/ Web Vulns)
This section is all about hacking a thick client that talks to a web backend. It’s not about memory corruption — this is network+logic+injection stuff, but inside a .jar GUI app.

What makes this scenario CPTS-relevant:

JAR file leaks creds, server name, port

You can decompile it, modify code, recompile, and bypass stuff (path traversal, SQLi)

Eventually you forge a fake admin login using a client-side mod + SQL injection

🧰 Workflow
🏁 1. Initial Foothold
You find a .jar thick client on FTP, SMB, or local disk

You’re given creds or find them in a config file

App fails to connect (wrong port/host)

🕸️ 2. Analyze Client-Server Comms
Run app, capture with Wireshark

Look for port, hostname

Fix with hosts file

🔍 3. Fix Bad Port
Decompile or extract JAR (beans.xml)

Find hardcoded host:port

Update port → breaks hash sigs

Remove JAR manifest digests, rebuild

🔐 4. Gain Access
Use found creds (qtc:clarabibi)

App now connects, you’re inside but low-priv

📂 5. Exploit File Read (Path Traversal)
You can read files, but there’s a / filter

Bypass by modifying Java class, recompile

Now you can traverse with ../ and steal sensitive files

💾 6. Download & Reverse Server JAR
Find fatty-server.jar, use a custom "Open" function to download to desktop

Reverse it, find SQLi in login logic

💉 7. Exploit SQL Injection
Username is unsanitized, password is hashed

Modify client code to send raw plaintext password (skip hashing)

Use SQLi in username field with UNION SELECT to forge a fake admin login

🔁 IF THIS, THEN THAT
✅ Got This	🚀 Do That
JAR file with login screen	Try creds, Wireshark connection
Port/host wrong	Edit hosts or patch beans.xml, recompile
JAR crashes on rebuild	Remove signature checks (MANIFEST.MF, .SF, .RSA)
App has file read	Try ../, bypass with code change if needed
See server JAR	Download, decompile, find backend logic
Login fails despite SQLi	Check if password is hashed client-side
Client-side hashing	Patch to send raw password
UNION injection	Forge admin user with known password
App logs SQL errors	Inject and check logs via traversal
🧠 Hints & Patterns to Recognize
👀 Symptom	🎯 Pattern
.jar app doesn’t connect	Check host/port mismatch
Login fails even with good creds	Look for port/env misconfig
Login screen + notes.txt files	Clues often contain user/pass or service info
You can read server-side files	Check for path traversal via UI or JAR code
Can’t read /etc/passwd	Likely filtering / – decode or patch Java
File download possible	Patch method to write file to disk
Login function uses username + password + salt for hash	Patch setPassword() to just use raw input
SQLi in username only	Use UNION with known password + role
🎓 In CPTS Exam... When Would You Use This?
✅ After initial access, and you:

Find a GUI app (.jar, .exe) on FTP, SMB, or disk

See client/server talk on non-web port (like 1337)

Get creds that should work but don’t

Have access to reverse engineer .jar or .exe

❗ This is NOT your first move. But if a .jar is handed to you on a silver platter, it's time to:

Decompile

Patch

Bypass logic

Leak files

Forge login
