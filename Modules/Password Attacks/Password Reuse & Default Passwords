It is common for both users and administrators to leave defaults in place. Administrators have to keep track of all the technology, infrastructure, and applications along with the data being accessed. In this case, the same password is often used for configuration purposes, and then the password is forgotten to be changed for one interface or another. In addition, many applications that work with authentication mechanisms, basically almost all, often come with default credentials after installation. These default credentials may be forgotten to be changed after configuration, especially when it comes to internal applications where the administrators assume that no one else will find them and do not even try to use them.

In addition, easy-to-remember passwords that can be typed quickly instead of typing 15-character long passwords are often used repeatedly because Single-Sign-On (SSO) is not always immediately available during initial installation, and configuration in internal networks requires significant changes. When configuring networks, we sometimes work with vast infrastructures (depending on the company's size) that can have many hundreds of interfaces. Often one network device, such as a router, printer, or a firewall, is overlooked, and the default credentials are used, or the same password is reused.

Credential Stuffing
There are various databases that keep a running list of known default credentials. One of them is the DefaultCreds-Cheat-Sheet ( https://github.com/ihebski/DefaultCreds-cheat-sheet ) . Here is a small excerpt from the entire table of this cheat sheet:

Default credentials can also be found in the product documentation, as they contain the steps necessary to set up the service successfully. Some devices/applications require the user to set up a password at install, but others use a default, weak password. Attacking those services with the default or obtained credentials is called Credential Stuffing. This is a simplified variant of brute-forcing because only composite usernames and the associated passwords are used.

We can imagine that we have found some applications used in the network by our customers. After searching the internet for the default credentials, we can create a new list that separates these composite credentials with a colon (username:password). In addition, we can select the passwords and mutate them by our rules to increase the probability of hits.

Credential Stuffing - Hydra Syntax

SYNTAX: MJBUCKNER@htb[/htb]$ hydra -C user_pass.list ssh://10.129.42.197

Here, OSINT plays another significant role. Because OSINT gives us a "feel" for how the company and its infrastructure are structured, we will understand which passwords and user names we can combine. We can then store these in our lists and use them afterward. In addition, we can use Google to see if the applications we find have hardcoded credentials that can be used.

Literally as long as we know what services or applications are currently in use we can do a simple google search of "<Service / Application> Default credentials"

Challenge: 10.129.46.1

Question 1 - Use the user's credentials we found in the previous section and find out the credentials for MySQL. Submit the credentials as the answer. (Format: <username>:<password>)
1) lets use the default git hub repo found in the section to see if theres default creds for mysql ( https://github.com/ihebski/DefaultCreds-cheat-sheet ) 
2) after some scrolling we found them 
MySQL	superdba	admin
3) the creds found in last section was for sam and ssh they were sam:B@tm@n2022!
4) lets log in via ssh and then connect to mysql 
5) ssh sam@10.129.46.1 
6) mysql -u superdba -padmin 
7) and we are in. so the answer to the question is superdba:admin 
