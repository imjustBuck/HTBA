
Reflected XSS vulnerabilities occur when our input reaches the back-end server and gets returned to us without being filtered or sanitized. There are many cases in which our entire input might get returned to us, like error messages or confirmation messages. In these cases, we may attempt using XSS payloads to see whether they execute. However, as these are usually temporary messages, once we move from the page, they would not execute again, and hence they are Non-Persistent.

But if the XSS vulnerability is Non-Persistent, how would we target victims with it?

This depends on which HTTP request is used to send our input to the server. We can check this through the Firefox Developer Tools by clicking [CTRL+Shift+I] and selecting the Network tab. Then, we can put our test payload again and click Add to send it:
So, to target a user, we can send them a URL containing our payload. To get the URL, we can copy the URL from the URL bar in Firefox after sending our XSS payload, or we can right-click on the GET request in the Network tab and select Copy>Copy URL. Once the victim visits this URL, the XSS payload would execute:

http://SERVER_IP:PORT/index.php?task=<script>alert(window.origin)</script>

<script>alert(document.cookie)</script>

CHALLENGE: 94.237.63.49:45914 

QUESTION 1 - To get the flag, use the same payload we used above, but change its JavaScript code to show the cookie instead of showing the url. - HTB{r3fl3c73d_b4ck_2_m3}
1) http://94.237.63.49:45914 
2) <script>alert(document.cookie)</script>
3) URL should look like : http://94.237.63.49:45914/index.php?task=%3Cscript%3Ealert%28document.cookie%29%3C%2Fscript%3E%2B
4) cookie=HTB{r3fl3c73d_b4ck_2_m3}
